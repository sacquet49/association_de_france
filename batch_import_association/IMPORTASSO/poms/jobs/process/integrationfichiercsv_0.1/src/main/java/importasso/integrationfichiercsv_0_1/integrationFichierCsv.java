// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package importasso.integrationfichiercsv_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: integrationFichierCsv Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class integrationFichierCsv implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(association_file != null){
				
					this.setProperty("association_file", association_file.toString());
				
			}
			
			if(db_host != null){
				
					this.setProperty("db_host", db_host.toString());
				
			}
			
			if(db_name != null){
				
					this.setProperty("db_name", db_name.toString());
				
			}
			
			if(db_password != null){
				
					this.setProperty("db_password", db_password.toString());
				
			}
			
			if(db_port != null){
				
					this.setProperty("db_port", db_port.toString());
				
			}
			
			if(db_shema != null){
				
					this.setProperty("db_shema", db_shema.toString());
				
			}
			
			if(db_user_name != null){
				
					this.setProperty("db_user_name", db_user_name.toString());
				
			}
			
			if(properties_filepath != null){
				
					this.setProperty("properties_filepath", properties_filepath.toString());
				
			}
			
			if(rejet_association_file != null){
				
					this.setProperty("rejet_association_file", rejet_association_file.toString());
				
			}
			
			if(rejet_waldec_association_file != null){
				
					this.setProperty("rejet_waldec_association_file", rejet_waldec_association_file.toString());
				
			}
			
			if(waldec_association_file != null){
				
					this.setProperty("waldec_association_file", waldec_association_file.toString());
				
			}
			
		}

public String association_file;
public String getAssociation_file(){
	return this.association_file;
}
public String db_host;
public String getDb_host(){
	return this.db_host;
}
public String db_name;
public String getDb_name(){
	return this.db_name;
}
public String db_password;
public String getDb_password(){
	return this.db_password;
}
public String db_port;
public String getDb_port(){
	return this.db_port;
}
public String db_shema;
public String getDb_shema(){
	return this.db_shema;
}
public String db_user_name;
public String getDb_user_name(){
	return this.db_user_name;
}
public String properties_filepath;
public String getProperties_filepath(){
	return this.properties_filepath;
}
public String rejet_association_file;
public String getRejet_association_file(){
	return this.rejet_association_file;
}
public String rejet_waldec_association_file;
public String getRejet_waldec_association_file(){
	return this.rejet_waldec_association_file;
}
public String waldec_association_file;
public String getWaldec_association_file(){
	return this.waldec_association_file;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "integrationFichierCsv";
	private final String projectName = "IMPORTASSO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				integrationFichierCsv.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(integrationFichierCsv.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputProperties_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputProperties_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
		String url_tDBConnection_1 = "jdbc:postgresql://"+context.db_host+":"+context.db_port+"/"+context.db_name; 
		String dbUser_tDBConnection_1 = context.db_user_name;
		
		
			
	final String decryptedPassword_tDBConnection_1 = context.db_password; 
			String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
		
	java.sql.Connection conn_tDBConnection_1 = null;
	
		java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        java.util.List<String> driverList_tDBConnection_1 = java.util.Arrays.<String>asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver");
        if (driverList_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
            		//do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tDBConnection_1);
		
				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tDBConnection_1",context.db_shema);

	globalMap.put("conn_" + "tDBConnection_1",conn_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileList_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileList_2Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class rnaImportStruct implements routines.system.IPersistableRow<rnaImportStruct> {
    final static byte[] commonByteArrayLock_IMPORTASSO_integrationFichierCsv = new byte[0];
    static byte[] commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String id_ex;

				public String getId_ex () {
					return this.id_ex;
				}
				
			    public String siret;

				public String getSiret () {
					return this.siret;
				}
				
			    public String gestion;

				public String getGestion () {
					return this.gestion;
				}
				
			    public java.util.Date date_creat;

				public java.util.Date getDate_creat () {
					return this.date_creat;
				}
				
			    public java.util.Date date_publi;

				public java.util.Date getDate_publi () {
					return this.date_publi;
				}
				
			    public String nature;

				public String getNature () {
					return this.nature;
				}
				
			    public String titre;

				public String getTitre () {
					return this.titre;
				}
				
			    public String groupement;

				public String getGroupement () {
					return this.groupement;
				}
				
			    public String objet;

				public String getObjet () {
					return this.objet;
				}
				
			    public String objet_social1;

				public String getObjet_social1 () {
					return this.objet_social1;
				}
				
			    public String objet_social2;

				public String getObjet_social2 () {
					return this.objet_social2;
				}
				
			    public String adr1;

				public String getAdr1 () {
					return this.adr1;
				}
				
			    public String adr2;

				public String getAdr2 () {
					return this.adr2;
				}
				
			    public String adr3;

				public String getAdr3 () {
					return this.adr3;
				}
				
			    public String adrs_codepostal;

				public String getAdrs_codepostal () {
					return this.adrs_codepostal;
				}
				
			    public String libcom;

				public String getLibcom () {
					return this.libcom;
				}
				
			    public String adrs_codeinsee;

				public String getAdrs_codeinsee () {
					return this.adrs_codeinsee;
				}
				
			    public String dir_civilite;

				public String getDir_civilite () {
					return this.dir_civilite;
				}
				
			    public String telephone;

				public String getTelephone () {
					return this.telephone;
				}
				
			    public String siteweb;

				public String getSiteweb () {
					return this.siteweb;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String observation;

				public String getObservation () {
					return this.observation;
				}
				
			    public String position;

				public String getPosition () {
					return this.position;
				}
				
			    public String rup_mi;

				public String getRup_mi () {
					return this.rup_mi;
				}
				
			    public java.util.Date maj_time;

				public java.util.Date getMaj_time () {
					return this.maj_time;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTASSO_integrationFichierCsv.length) {
				if(length < 1024 && commonByteArray_IMPORTASSO_integrationFichierCsv.length == 0) {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[1024];
				} else {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length);
			strReturn = new String(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTASSO_integrationFichierCsv) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.id_ex = readString(dis);
					
					this.siret = readString(dis);
					
					this.gestion = readString(dis);
					
					this.date_creat = readDate(dis);
					
					this.date_publi = readDate(dis);
					
					this.nature = readString(dis);
					
					this.titre = readString(dis);
					
					this.groupement = readString(dis);
					
					this.objet = readString(dis);
					
					this.objet_social1 = readString(dis);
					
					this.objet_social2 = readString(dis);
					
					this.adr1 = readString(dis);
					
					this.adr2 = readString(dis);
					
					this.adr3 = readString(dis);
					
					this.adrs_codepostal = readString(dis);
					
					this.libcom = readString(dis);
					
					this.adrs_codeinsee = readString(dis);
					
					this.dir_civilite = readString(dis);
					
					this.telephone = readString(dis);
					
					this.siteweb = readString(dis);
					
					this.email = readString(dis);
					
					this.observation = readString(dis);
					
					this.position = readString(dis);
					
					this.rup_mi = readString(dis);
					
					this.maj_time = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.id_ex,dos);
					
					// String
				
						writeString(this.siret,dos);
					
					// String
				
						writeString(this.gestion,dos);
					
					// java.util.Date
				
						writeDate(this.date_creat,dos);
					
					// java.util.Date
				
						writeDate(this.date_publi,dos);
					
					// String
				
						writeString(this.nature,dos);
					
					// String
				
						writeString(this.titre,dos);
					
					// String
				
						writeString(this.groupement,dos);
					
					// String
				
						writeString(this.objet,dos);
					
					// String
				
						writeString(this.objet_social1,dos);
					
					// String
				
						writeString(this.objet_social2,dos);
					
					// String
				
						writeString(this.adr1,dos);
					
					// String
				
						writeString(this.adr2,dos);
					
					// String
				
						writeString(this.adr3,dos);
					
					// String
				
						writeString(this.adrs_codepostal,dos);
					
					// String
				
						writeString(this.libcom,dos);
					
					// String
				
						writeString(this.adrs_codeinsee,dos);
					
					// String
				
						writeString(this.dir_civilite,dos);
					
					// String
				
						writeString(this.telephone,dos);
					
					// String
				
						writeString(this.siteweb,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.observation,dos);
					
					// String
				
						writeString(this.position,dos);
					
					// String
				
						writeString(this.rup_mi,dos);
					
					// java.util.Date
				
						writeDate(this.maj_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",id_ex="+id_ex);
		sb.append(",siret="+siret);
		sb.append(",gestion="+gestion);
		sb.append(",date_creat="+String.valueOf(date_creat));
		sb.append(",date_publi="+String.valueOf(date_publi));
		sb.append(",nature="+nature);
		sb.append(",titre="+titre);
		sb.append(",groupement="+groupement);
		sb.append(",objet="+objet);
		sb.append(",objet_social1="+objet_social1);
		sb.append(",objet_social2="+objet_social2);
		sb.append(",adr1="+adr1);
		sb.append(",adr2="+adr2);
		sb.append(",adr3="+adr3);
		sb.append(",adrs_codepostal="+adrs_codepostal);
		sb.append(",libcom="+libcom);
		sb.append(",adrs_codeinsee="+adrs_codeinsee);
		sb.append(",dir_civilite="+dir_civilite);
		sb.append(",telephone="+telephone);
		sb.append(",siteweb="+siteweb);
		sb.append(",email="+email);
		sb.append(",observation="+observation);
		sb.append(",position="+position);
		sb.append(",rup_mi="+rup_mi);
		sb.append(",maj_time="+String.valueOf(maj_time));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rnaImportStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_IMPORTASSO_integrationFichierCsv = new byte[0];
    static byte[] commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String id_ex;

				public String getId_ex () {
					return this.id_ex;
				}
				
			    public String siret;

				public String getSiret () {
					return this.siret;
				}
				
			    public String gestion;

				public String getGestion () {
					return this.gestion;
				}
				
			    public String date_creat;

				public String getDate_creat () {
					return this.date_creat;
				}
				
			    public String date_publi;

				public String getDate_publi () {
					return this.date_publi;
				}
				
			    public String nature;

				public String getNature () {
					return this.nature;
				}
				
			    public String groupement;

				public String getGroupement () {
					return this.groupement;
				}
				
			    public String titre;

				public String getTitre () {
					return this.titre;
				}
				
			    public String objet;

				public String getObjet () {
					return this.objet;
				}
				
			    public String objet_social1;

				public String getObjet_social1 () {
					return this.objet_social1;
				}
				
			    public String objet_social2;

				public String getObjet_social2 () {
					return this.objet_social2;
				}
				
			    public String adr1;

				public String getAdr1 () {
					return this.adr1;
				}
				
			    public String adr2;

				public String getAdr2 () {
					return this.adr2;
				}
				
			    public String adr3;

				public String getAdr3 () {
					return this.adr3;
				}
				
			    public String adrs_codepostal;

				public String getAdrs_codepostal () {
					return this.adrs_codepostal;
				}
				
			    public String libcom;

				public String getLibcom () {
					return this.libcom;
				}
				
			    public String adrs_codeinsee;

				public String getAdrs_codeinsee () {
					return this.adrs_codeinsee;
				}
				
			    public String dir_civilite;

				public String getDir_civilite () {
					return this.dir_civilite;
				}
				
			    public String siteweb;

				public String getSiteweb () {
					return this.siteweb;
				}
				
			    public String observation;

				public String getObservation () {
					return this.observation;
				}
				
			    public String position;

				public String getPosition () {
					return this.position;
				}
				
			    public String rup_mi;

				public String getRup_mi () {
					return this.rup_mi;
				}
				
			    public String maj_time;

				public String getMaj_time () {
					return this.maj_time;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTASSO_integrationFichierCsv.length) {
				if(length < 1024 && commonByteArray_IMPORTASSO_integrationFichierCsv.length == 0) {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[1024];
				} else {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length);
			strReturn = new String(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTASSO_integrationFichierCsv) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.id_ex = readString(dis);
					
					this.siret = readString(dis);
					
					this.gestion = readString(dis);
					
					this.date_creat = readString(dis);
					
					this.date_publi = readString(dis);
					
					this.nature = readString(dis);
					
					this.groupement = readString(dis);
					
					this.titre = readString(dis);
					
					this.objet = readString(dis);
					
					this.objet_social1 = readString(dis);
					
					this.objet_social2 = readString(dis);
					
					this.adr1 = readString(dis);
					
					this.adr2 = readString(dis);
					
					this.adr3 = readString(dis);
					
					this.adrs_codepostal = readString(dis);
					
					this.libcom = readString(dis);
					
					this.adrs_codeinsee = readString(dis);
					
					this.dir_civilite = readString(dis);
					
					this.siteweb = readString(dis);
					
					this.observation = readString(dis);
					
					this.position = readString(dis);
					
					this.rup_mi = readString(dis);
					
					this.maj_time = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.id_ex,dos);
					
					// String
				
						writeString(this.siret,dos);
					
					// String
				
						writeString(this.gestion,dos);
					
					// String
				
						writeString(this.date_creat,dos);
					
					// String
				
						writeString(this.date_publi,dos);
					
					// String
				
						writeString(this.nature,dos);
					
					// String
				
						writeString(this.groupement,dos);
					
					// String
				
						writeString(this.titre,dos);
					
					// String
				
						writeString(this.objet,dos);
					
					// String
				
						writeString(this.objet_social1,dos);
					
					// String
				
						writeString(this.objet_social2,dos);
					
					// String
				
						writeString(this.adr1,dos);
					
					// String
				
						writeString(this.adr2,dos);
					
					// String
				
						writeString(this.adr3,dos);
					
					// String
				
						writeString(this.adrs_codepostal,dos);
					
					// String
				
						writeString(this.libcom,dos);
					
					// String
				
						writeString(this.adrs_codeinsee,dos);
					
					// String
				
						writeString(this.dir_civilite,dos);
					
					// String
				
						writeString(this.siteweb,dos);
					
					// String
				
						writeString(this.observation,dos);
					
					// String
				
						writeString(this.position,dos);
					
					// String
				
						writeString(this.rup_mi,dos);
					
					// String
				
						writeString(this.maj_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",id_ex="+id_ex);
		sb.append(",siret="+siret);
		sb.append(",gestion="+gestion);
		sb.append(",date_creat="+date_creat);
		sb.append(",date_publi="+date_publi);
		sb.append(",nature="+nature);
		sb.append(",groupement="+groupement);
		sb.append(",titre="+titre);
		sb.append(",objet="+objet);
		sb.append(",objet_social1="+objet_social1);
		sb.append(",objet_social2="+objet_social2);
		sb.append(",adr1="+adr1);
		sb.append(",adr2="+adr2);
		sb.append(",adr3="+adr3);
		sb.append(",adrs_codepostal="+adrs_codepostal);
		sb.append(",libcom="+libcom);
		sb.append(",adrs_codeinsee="+adrs_codeinsee);
		sb.append(",dir_civilite="+dir_civilite);
		sb.append(",siteweb="+siteweb);
		sb.append(",observation="+observation);
		sb.append(",position="+position);
		sb.append(",rup_mi="+rup_mi);
		sb.append(",maj_time="+maj_time);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_IMPORTASSO_integrationFichierCsv = new byte[0];
    static byte[] commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String id_ex;

				public String getId_ex () {
					return this.id_ex;
				}
				
			    public String siret;

				public String getSiret () {
					return this.siret;
				}
				
			    public String gestion;

				public String getGestion () {
					return this.gestion;
				}
				
			    public String date_creat;

				public String getDate_creat () {
					return this.date_creat;
				}
				
			    public String date_publi;

				public String getDate_publi () {
					return this.date_publi;
				}
				
			    public String nature;

				public String getNature () {
					return this.nature;
				}
				
			    public String groupement;

				public String getGroupement () {
					return this.groupement;
				}
				
			    public String titre;

				public String getTitre () {
					return this.titre;
				}
				
			    public String objet;

				public String getObjet () {
					return this.objet;
				}
				
			    public String objet_social1;

				public String getObjet_social1 () {
					return this.objet_social1;
				}
				
			    public String objet_social2;

				public String getObjet_social2 () {
					return this.objet_social2;
				}
				
			    public String adr1;

				public String getAdr1 () {
					return this.adr1;
				}
				
			    public String adr2;

				public String getAdr2 () {
					return this.adr2;
				}
				
			    public String adr3;

				public String getAdr3 () {
					return this.adr3;
				}
				
			    public String adrs_codepostal;

				public String getAdrs_codepostal () {
					return this.adrs_codepostal;
				}
				
			    public String libcom;

				public String getLibcom () {
					return this.libcom;
				}
				
			    public String adrs_codeinsee;

				public String getAdrs_codeinsee () {
					return this.adrs_codeinsee;
				}
				
			    public String dir_civilite;

				public String getDir_civilite () {
					return this.dir_civilite;
				}
				
			    public String siteweb;

				public String getSiteweb () {
					return this.siteweb;
				}
				
			    public String observation;

				public String getObservation () {
					return this.observation;
				}
				
			    public String position;

				public String getPosition () {
					return this.position;
				}
				
			    public String rup_mi;

				public String getRup_mi () {
					return this.rup_mi;
				}
				
			    public String maj_time;

				public String getMaj_time () {
					return this.maj_time;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id = this.id;
	            other.id_ex = this.id_ex;
	            other.siret = this.siret;
	            other.gestion = this.gestion;
	            other.date_creat = this.date_creat;
	            other.date_publi = this.date_publi;
	            other.nature = this.nature;
	            other.groupement = this.groupement;
	            other.titre = this.titre;
	            other.objet = this.objet;
	            other.objet_social1 = this.objet_social1;
	            other.objet_social2 = this.objet_social2;
	            other.adr1 = this.adr1;
	            other.adr2 = this.adr2;
	            other.adr3 = this.adr3;
	            other.adrs_codepostal = this.adrs_codepostal;
	            other.libcom = this.libcom;
	            other.adrs_codeinsee = this.adrs_codeinsee;
	            other.dir_civilite = this.dir_civilite;
	            other.siteweb = this.siteweb;
	            other.observation = this.observation;
	            other.position = this.position;
	            other.rup_mi = this.rup_mi;
	            other.maj_time = this.maj_time;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTASSO_integrationFichierCsv.length) {
				if(length < 1024 && commonByteArray_IMPORTASSO_integrationFichierCsv.length == 0) {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[1024];
				} else {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length);
			strReturn = new String(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTASSO_integrationFichierCsv) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.id_ex = readString(dis);
					
					this.siret = readString(dis);
					
					this.gestion = readString(dis);
					
					this.date_creat = readString(dis);
					
					this.date_publi = readString(dis);
					
					this.nature = readString(dis);
					
					this.groupement = readString(dis);
					
					this.titre = readString(dis);
					
					this.objet = readString(dis);
					
					this.objet_social1 = readString(dis);
					
					this.objet_social2 = readString(dis);
					
					this.adr1 = readString(dis);
					
					this.adr2 = readString(dis);
					
					this.adr3 = readString(dis);
					
					this.adrs_codepostal = readString(dis);
					
					this.libcom = readString(dis);
					
					this.adrs_codeinsee = readString(dis);
					
					this.dir_civilite = readString(dis);
					
					this.siteweb = readString(dis);
					
					this.observation = readString(dis);
					
					this.position = readString(dis);
					
					this.rup_mi = readString(dis);
					
					this.maj_time = readString(dis);
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.id_ex,dos);
					
					// String
				
						writeString(this.siret,dos);
					
					// String
				
						writeString(this.gestion,dos);
					
					// String
				
						writeString(this.date_creat,dos);
					
					// String
				
						writeString(this.date_publi,dos);
					
					// String
				
						writeString(this.nature,dos);
					
					// String
				
						writeString(this.groupement,dos);
					
					// String
				
						writeString(this.titre,dos);
					
					// String
				
						writeString(this.objet,dos);
					
					// String
				
						writeString(this.objet_social1,dos);
					
					// String
				
						writeString(this.objet_social2,dos);
					
					// String
				
						writeString(this.adr1,dos);
					
					// String
				
						writeString(this.adr2,dos);
					
					// String
				
						writeString(this.adr3,dos);
					
					// String
				
						writeString(this.adrs_codepostal,dos);
					
					// String
				
						writeString(this.libcom,dos);
					
					// String
				
						writeString(this.adrs_codeinsee,dos);
					
					// String
				
						writeString(this.dir_civilite,dos);
					
					// String
				
						writeString(this.siteweb,dos);
					
					// String
				
						writeString(this.observation,dos);
					
					// String
				
						writeString(this.position,dos);
					
					// String
				
						writeString(this.rup_mi,dos);
					
					// String
				
						writeString(this.maj_time,dos);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",id_ex="+id_ex);
		sb.append(",siret="+siret);
		sb.append(",gestion="+gestion);
		sb.append(",date_creat="+date_creat);
		sb.append(",date_publi="+date_publi);
		sb.append(",nature="+nature);
		sb.append(",groupement="+groupement);
		sb.append(",titre="+titre);
		sb.append(",objet="+objet);
		sb.append(",objet_social1="+objet_social1);
		sb.append(",objet_social2="+objet_social2);
		sb.append(",adr1="+adr1);
		sb.append(",adr2="+adr2);
		sb.append(",adr3="+adr3);
		sb.append(",adrs_codepostal="+adrs_codepostal);
		sb.append(",libcom="+libcom);
		sb.append(",adrs_codeinsee="+adrs_codeinsee);
		sb.append(",dir_civilite="+dir_civilite);
		sb.append(",siteweb="+siteweb);
		sb.append(",observation="+observation);
		sb.append(",position="+position);
		sb.append(",rup_mi="+rup_mi);
		sb.append(",maj_time="+maj_time);
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
rnaImportStruct rnaImport = new rnaImportStruct();
row2Struct row2 = new row2Struct();



	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = context.association_file;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("*.csv");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("rnaImport", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputDelimited_1);
					//Thread.sleep(1000);
				}				
			



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("rnaImport" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = "association";
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + "association";
}

        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_1=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"id\",\"id_ex\",\"siret\",\"gestion\",\"date_creat\",\"date_publi\",\"nature\",\"titre\",\"groupement\",\"objet\",\"objet_social1\",\"objet_social2\",\"adr1\",\"adr2\",\"adr3\",\"adrs_codepostal\",\"libcom\",\"adrs_codeinsee\",\"dir_civilite\",\"telephone\",\"siteweb\",\"email\",\"observation\",\"position\",\"rup_mi\",\"maj_time\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"id_ex\" = ?,\"siret\" = ?,\"gestion\" = ?,\"date_creat\" = ?,\"date_publi\" = ?,\"nature\" = ?,\"titre\" = ?,\"groupement\" = ?,\"objet\" = ?,\"objet_social1\" = ?,\"objet_social2\" = ?,\"adr1\" = ?,\"adr2\" = ?,\"adr3\" = ?,\"adrs_codepostal\" = ?,\"libcom\" = ?,\"adrs_codeinsee\" = ?,\"dir_civilite\" = ?,\"telephone\" = ?,\"siteweb\" = ?,\"email\" = ?,\"observation\" = ?,\"position\" = ?,\"rup_mi\" = ?,\"maj_time\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
rnaImportStruct rnaImport_tmp = new rnaImportStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")) + ".rejet" )).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
    if(filetFileOutputDelimited_2.exists()){
            throw new RuntimeException("The particular file \""+filetFileOutputDelimited_2.getAbsoluteFile() +
            "\" already exist. If you want to overwrite the file, please uncheck the" + 
            " \"Throw an error if the file already exist\" option in Advanced settings.");
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"))/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
								rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
								if(!(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        			if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
	    							row2 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.id = null;
					
							row1.id_ex = null;
					
							row1.siret = null;
					
							row1.gestion = null;
					
							row1.date_creat = null;
					
							row1.date_publi = null;
					
							row1.nature = null;
					
							row1.groupement = null;
					
							row1.titre = null;
					
							row1.objet = null;
					
							row1.objet_social1 = null;
					
							row1.objet_social2 = null;
					
							row1.adr1 = null;
					
							row1.adr2 = null;
					
							row1.adr3 = null;
					
							row1.adrs_codepostal = null;
					
							row1.libcom = null;
					
							row1.adrs_codeinsee = null;
					
							row1.dir_civilite = null;
					
							row1.siteweb = null;
					
							row1.observation = null;
					
							row1.position = null;
					
							row1.rup_mi = null;
					
							row1.maj_time = null;
					
				}else{
					
					for(int i_tFileInputDelimited_1=0;i_tFileInputDelimited_1<rowtFileInputDelimited_1.length;i_tFileInputDelimited_1++){
						rowtFileInputDelimited_1[i_tFileInputDelimited_1]=rowtFileInputDelimited_1[i_tFileInputDelimited_1].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.id_ex = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.id_ex = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.siret = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.siret = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.gestion = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.gestion = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.date_creat = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.date_creat = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.date_publi = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.date_publi = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.nature = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.nature = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.groupement = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.groupement = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.titre = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.titre = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.objet = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.objet = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.objet_social1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.objet_social1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.objet_social2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.objet_social2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.adr1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.adr1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.adr2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.adr2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.adr3 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.adr3 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.adrs_codepostal = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.adrs_codepostal = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.libcom = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.libcom = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.adrs_codeinsee = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.adrs_codeinsee = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.dir_civilite = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.dir_civilite = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.siteweb = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.siteweb = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.observation = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.observation = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.position = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.position = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.rup_mi = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.rup_mi = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.maj_time = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.maj_time = null;
							
						
						}
						
						
					
				}
				
 					int filedsum = rowtFileInputDelimited_1.length;
 					if(filedsum < (24 )){
 						throw new java.lang.Exception("Column(s) missing");
 					} else if(filedsum > (24 )) {
 						throw new RuntimeException("Too many columns");
 					}     
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
						                    row2 = new row2Struct();
                							
    				row2.id = row1.id;
				
    				row2.id_ex = row1.id_ex;
				
    				row2.siret = row1.siret;
				
    				row2.gestion = row1.gestion;
				
    				row2.date_creat = row1.date_creat;
				
    				row2.date_publi = row1.date_publi;
				
    				row2.nature = row1.nature;
				
    				row2.groupement = row1.groupement;
				
    				row2.titre = row1.titre;
				
    				row2.objet = row1.objet;
				
    				row2.objet_social1 = row1.objet_social1;
				
    				row2.objet_social2 = row1.objet_social2;
				
    				row2.adr1 = row1.adr1;
				
    				row2.adr2 = row1.adr2;
				
    				row2.adr3 = row1.adr3;
				
    				row2.adrs_codepostal = row1.adrs_codepostal;
				
    				row2.libcom = row1.libcom;
				
    				row2.adrs_codeinsee = row1.adrs_codeinsee;
				
    				row2.dir_civilite = row1.dir_civilite;
				
    				row2.siteweb = row1.siteweb;
				
    				row2.observation = row1.observation;
				
    				row2.position = row1.position;
				
    				row2.rup_mi = row1.rup_mi;
				
    				row2.maj_time = row1.maj_time;
				
			
                							row2.errorMessage = e.getMessage() + " - Line: " + tos_count_tFileInputDelimited_1;
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

rnaImport = null;


// # Output table : 'rnaImport'
rnaImport_tmp.id = row1.id;
rnaImport_tmp.id_ex = row1.id_ex;
rnaImport_tmp.siret = row1.siret;
rnaImport_tmp.gestion = row1.gestion;
rnaImport_tmp.date_creat = row1.date_creat != null && !row1.date_creat.isEmpty() ? 
new SimpleDateFormat("yyyy-MM-dd").parse(row1.date_creat) : null; ;
rnaImport_tmp.date_publi = row1.date_publi != null && !row1.date_publi.isEmpty() ? 
new SimpleDateFormat("yyyy-MM-dd").parse(row1.date_publi) : null; ;
rnaImport_tmp.nature = row1.nature;
rnaImport_tmp.titre = row1.titre != null ? 
row1.titre.replace("\n", "") : null ;
rnaImport_tmp.groupement = row1.groupement;
rnaImport_tmp.objet = row1.objet != null ? 
row1.objet.replace("\n", "") : null ;
rnaImport_tmp.objet_social1 = row1.objet_social1 != null ? 
row1.objet_social1.replace("\n", "") : null ;
rnaImport_tmp.objet_social2 = row1.objet_social2 != null ? 
row1.objet_social2.replace("\n", "") : null ;
rnaImport_tmp.adr1 = row1.adr1 != null ? 
row1.adr1.replace("\n", "") : null ;
rnaImport_tmp.adr2 = row1.adr2 != null ? 
row1.adr2.replace("\n", "") : null ;
rnaImport_tmp.adr3 = row1.adr3 != null ? 
row1.adr3.replace("\n", "") : null ;
rnaImport_tmp.adrs_codepostal = row1.adrs_codepostal;
rnaImport_tmp.libcom = row1.libcom;
rnaImport_tmp.adrs_codeinsee = row1.adrs_codeinsee;
rnaImport_tmp.dir_civilite = row1.dir_civilite;
rnaImport_tmp.telephone = "";
rnaImport_tmp.siteweb = row1.siteweb;
rnaImport_tmp.email = "";
rnaImport_tmp.observation = row1.observation != null ? 
row1.observation.replace("\n", "") : null ;
rnaImport_tmp.position = row1.position;
rnaImport_tmp.rup_mi = row1.rup_mi;
rnaImport_tmp.maj_time = row1.maj_time != null && !row1.maj_time.isEmpty() ? 
new SimpleDateFormat("yyyy-MM-dd").parse(row1.maj_time) : null; ;
rnaImport = rnaImport_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "rnaImport"
if(rnaImport != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//rnaImport
			//rnaImport


			
				if(execStat){
					runStat.updateStatOnConnection("rnaImport"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    if(rnaImport.id == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, rnaImport.id);
}

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        if(rnaImport.id_ex == null) {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(1, rnaImport.id_ex);
}

                        if(rnaImport.siret == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(2, rnaImport.siret);
}

                        if(rnaImport.gestion == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, rnaImport.gestion);
}

                        if(rnaImport.date_creat != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(rnaImport.date_creat.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(rnaImport.date_publi != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(5, new java.sql.Timestamp(rnaImport.date_publi.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(rnaImport.nature == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(6, rnaImport.nature);
}

                        if(rnaImport.titre == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(7, rnaImport.titre);
}

                        if(rnaImport.groupement == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(8, rnaImport.groupement);
}

                        if(rnaImport.objet == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(9, rnaImport.objet);
}

                        if(rnaImport.objet_social1 == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(10, rnaImport.objet_social1);
}

                        if(rnaImport.objet_social2 == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(11, rnaImport.objet_social2);
}

                        if(rnaImport.adr1 == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(12, rnaImport.adr1);
}

                        if(rnaImport.adr2 == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(13, rnaImport.adr2);
}

                        if(rnaImport.adr3 == null) {
pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(14, rnaImport.adr3);
}

                        if(rnaImport.adrs_codepostal == null) {
pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(15, rnaImport.adrs_codepostal);
}

                        if(rnaImport.libcom == null) {
pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(16, rnaImport.libcom);
}

                        if(rnaImport.adrs_codeinsee == null) {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(17, rnaImport.adrs_codeinsee);
}

                        if(rnaImport.dir_civilite == null) {
pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(18, rnaImport.dir_civilite);
}

                        if(rnaImport.telephone == null) {
pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(19, rnaImport.telephone);
}

                        if(rnaImport.siteweb == null) {
pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(20, rnaImport.siteweb);
}

                        if(rnaImport.email == null) {
pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(21, rnaImport.email);
}

                        if(rnaImport.observation == null) {
pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(22, rnaImport.observation);
}

                        if(rnaImport.position == null) {
pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(23, rnaImport.position);
}

                        if(rnaImport.rup_mi == null) {
pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(24, rnaImport.rup_mi);
}

                        if(rnaImport.maj_time != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(25, new java.sql.Timestamp(rnaImport.maj_time.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.TIMESTAMP);
}

                        if(rnaImport.id == null) {
pstmtUpdate_tDBOutput_1.setNull(26 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(26 + count_tDBOutput_1, rnaImport.id);
}

                try {
					
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(rnaImport.id == null) {
pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(1, rnaImport.id);
}

                        if(rnaImport.id_ex == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(2, rnaImport.id_ex);
}

                        if(rnaImport.siret == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, rnaImport.siret);
}

                        if(rnaImport.gestion == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, rnaImport.gestion);
}

                        if(rnaImport.date_creat != null) {
pstmtInsert_tDBOutput_1.setTimestamp(5, new java.sql.Timestamp(rnaImport.date_creat.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(rnaImport.date_publi != null) {
pstmtInsert_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(rnaImport.date_publi.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(rnaImport.nature == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(7, rnaImport.nature);
}

                        if(rnaImport.titre == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(8, rnaImport.titre);
}

                        if(rnaImport.groupement == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(9, rnaImport.groupement);
}

                        if(rnaImport.objet == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(10, rnaImport.objet);
}

                        if(rnaImport.objet_social1 == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(11, rnaImport.objet_social1);
}

                        if(rnaImport.objet_social2 == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(12, rnaImport.objet_social2);
}

                        if(rnaImport.adr1 == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(13, rnaImport.adr1);
}

                        if(rnaImport.adr2 == null) {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(14, rnaImport.adr2);
}

                        if(rnaImport.adr3 == null) {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(15, rnaImport.adr3);
}

                        if(rnaImport.adrs_codepostal == null) {
pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(16, rnaImport.adrs_codepostal);
}

                        if(rnaImport.libcom == null) {
pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(17, rnaImport.libcom);
}

                        if(rnaImport.adrs_codeinsee == null) {
pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(18, rnaImport.adrs_codeinsee);
}

                        if(rnaImport.dir_civilite == null) {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(19, rnaImport.dir_civilite);
}

                        if(rnaImport.telephone == null) {
pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(20, rnaImport.telephone);
}

                        if(rnaImport.siteweb == null) {
pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(21, rnaImport.siteweb);
}

                        if(rnaImport.email == null) {
pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(22, rnaImport.email);
}

                        if(rnaImport.observation == null) {
pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(23, rnaImport.observation);
}

                        if(rnaImport.position == null) {
pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(24, rnaImport.position);
}

                        if(rnaImport.rup_mi == null) {
pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(25, rnaImport.rup_mi);
}

                        if(rnaImport.maj_time != null) {
pstmtInsert_tDBOutput_1.setTimestamp(26, new java.sql.Timestamp(rnaImport.maj_time.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(26, java.sql.Types.TIMESTAMP);
}

                try {
					
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "rnaImport"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row2.id != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.id_ex != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.id_ex
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.siret != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.siret
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.gestion != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.gestion
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.date_creat != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.date_creat
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.date_publi != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.date_publi
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.nature != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.nature
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.groupement != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.groupement
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.titre != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.titre
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.objet != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.objet
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.objet_social1 != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.objet_social1
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.objet_social2 != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.objet_social2
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.adr1 != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.adr1
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.adr2 != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.adr2
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.adr3 != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.adr3
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.adrs_codepostal != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.adrs_codepostal
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.libcom != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.libcom
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.adrs_codeinsee != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.adrs_codeinsee
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.dir_civilite != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.dir_civilite
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.siteweb != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.siteweb
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.observation != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.observation
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.position != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.position
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.rup_mi != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.rup_mi
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.maj_time != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.maj_time
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.errorCode != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.errorCode
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row2.errorMessage != null) {
                        sb_tFileOutputDelimited_2.append(
                            row2.errorMessage
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("rnaImport"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */







	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputDelimited_1);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */







	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	


public static class waldecImportStruct implements routines.system.IPersistableRow<waldecImportStruct> {
    final static byte[] commonByteArrayLock_IMPORTASSO_integrationFichierCsv = new byte[0];
    static byte[] commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String id_ex;

				public String getId_ex () {
					return this.id_ex;
				}
				
			    public String siret;

				public String getSiret () {
					return this.siret;
				}
				
			    public String rup_mi;

				public String getRup_mi () {
					return this.rup_mi;
				}
				
			    public String gestion;

				public String getGestion () {
					return this.gestion;
				}
				
			    public java.util.Date date_creat;

				public java.util.Date getDate_creat () {
					return this.date_creat;
				}
				
			    public java.util.Date date_decla;

				public java.util.Date getDate_decla () {
					return this.date_decla;
				}
				
			    public java.util.Date date_publi;

				public java.util.Date getDate_publi () {
					return this.date_publi;
				}
				
			    public java.util.Date date_disso;

				public java.util.Date getDate_disso () {
					return this.date_disso;
				}
				
			    public String nature;

				public String getNature () {
					return this.nature;
				}
				
			    public String groupement;

				public String getGroupement () {
					return this.groupement;
				}
				
			    public String titre;

				public String getTitre () {
					return this.titre;
				}
				
			    public String titre_court;

				public String getTitre_court () {
					return this.titre_court;
				}
				
			    public String objet;

				public String getObjet () {
					return this.objet;
				}
				
			    public String objet_social1;

				public String getObjet_social1 () {
					return this.objet_social1;
				}
				
			    public String objet_social2;

				public String getObjet_social2 () {
					return this.objet_social2;
				}
				
			    public String adrs_complement;

				public String getAdrs_complement () {
					return this.adrs_complement;
				}
				
			    public String adrs_numvoie;

				public String getAdrs_numvoie () {
					return this.adrs_numvoie;
				}
				
			    public String adrs_repetition;

				public String getAdrs_repetition () {
					return this.adrs_repetition;
				}
				
			    public String adrs_typevoie;

				public String getAdrs_typevoie () {
					return this.adrs_typevoie;
				}
				
			    public String adrs_libvoie;

				public String getAdrs_libvoie () {
					return this.adrs_libvoie;
				}
				
			    public String adrs_distrib;

				public String getAdrs_distrib () {
					return this.adrs_distrib;
				}
				
			    public String adrs_codeinsee;

				public String getAdrs_codeinsee () {
					return this.adrs_codeinsee;
				}
				
			    public String adrs_codepostal;

				public String getAdrs_codepostal () {
					return this.adrs_codepostal;
				}
				
			    public String adrs_libcommune;

				public String getAdrs_libcommune () {
					return this.adrs_libcommune;
				}
				
			    public String adrg_declarant;

				public String getAdrg_declarant () {
					return this.adrg_declarant;
				}
				
			    public String adrg_complemid;

				public String getAdrg_complemid () {
					return this.adrg_complemid;
				}
				
			    public String adrg_complemgeo;

				public String getAdrg_complemgeo () {
					return this.adrg_complemgeo;
				}
				
			    public String adrg_libvoie;

				public String getAdrg_libvoie () {
					return this.adrg_libvoie;
				}
				
			    public String adrg_distrib;

				public String getAdrg_distrib () {
					return this.adrg_distrib;
				}
				
			    public String adrg_codepostal;

				public String getAdrg_codepostal () {
					return this.adrg_codepostal;
				}
				
			    public String adrg_achemine;

				public String getAdrg_achemine () {
					return this.adrg_achemine;
				}
				
			    public String adrg_pays;

				public String getAdrg_pays () {
					return this.adrg_pays;
				}
				
			    public String dir_civilite;

				public String getDir_civilite () {
					return this.dir_civilite;
				}
				
			    public String telephone;

				public String getTelephone () {
					return this.telephone;
				}
				
			    public String siteweb;

				public String getSiteweb () {
					return this.siteweb;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String publiweb;

				public String getPubliweb () {
					return this.publiweb;
				}
				
			    public String observation;

				public String getObservation () {
					return this.observation;
				}
				
			    public String position;

				public String getPosition () {
					return this.position;
				}
				
			    public java.util.Date maj_time;

				public java.util.Date getMaj_time () {
					return this.maj_time;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final waldecImportStruct other = (waldecImportStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(waldecImportStruct other) {

		other.id = this.id;
	            other.id_ex = this.id_ex;
	            other.siret = this.siret;
	            other.rup_mi = this.rup_mi;
	            other.gestion = this.gestion;
	            other.date_creat = this.date_creat;
	            other.date_decla = this.date_decla;
	            other.date_publi = this.date_publi;
	            other.date_disso = this.date_disso;
	            other.nature = this.nature;
	            other.groupement = this.groupement;
	            other.titre = this.titre;
	            other.titre_court = this.titre_court;
	            other.objet = this.objet;
	            other.objet_social1 = this.objet_social1;
	            other.objet_social2 = this.objet_social2;
	            other.adrs_complement = this.adrs_complement;
	            other.adrs_numvoie = this.adrs_numvoie;
	            other.adrs_repetition = this.adrs_repetition;
	            other.adrs_typevoie = this.adrs_typevoie;
	            other.adrs_libvoie = this.adrs_libvoie;
	            other.adrs_distrib = this.adrs_distrib;
	            other.adrs_codeinsee = this.adrs_codeinsee;
	            other.adrs_codepostal = this.adrs_codepostal;
	            other.adrs_libcommune = this.adrs_libcommune;
	            other.adrg_declarant = this.adrg_declarant;
	            other.adrg_complemid = this.adrg_complemid;
	            other.adrg_complemgeo = this.adrg_complemgeo;
	            other.adrg_libvoie = this.adrg_libvoie;
	            other.adrg_distrib = this.adrg_distrib;
	            other.adrg_codepostal = this.adrg_codepostal;
	            other.adrg_achemine = this.adrg_achemine;
	            other.adrg_pays = this.adrg_pays;
	            other.dir_civilite = this.dir_civilite;
	            other.telephone = this.telephone;
	            other.siteweb = this.siteweb;
	            other.email = this.email;
	            other.publiweb = this.publiweb;
	            other.observation = this.observation;
	            other.position = this.position;
	            other.maj_time = this.maj_time;
	            
	}

	public void copyKeysDataTo(waldecImportStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTASSO_integrationFichierCsv.length) {
				if(length < 1024 && commonByteArray_IMPORTASSO_integrationFichierCsv.length == 0) {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[1024];
				} else {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length);
			strReturn = new String(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTASSO_integrationFichierCsv) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.id_ex = readString(dis);
					
					this.siret = readString(dis);
					
					this.rup_mi = readString(dis);
					
					this.gestion = readString(dis);
					
					this.date_creat = readDate(dis);
					
					this.date_decla = readDate(dis);
					
					this.date_publi = readDate(dis);
					
					this.date_disso = readDate(dis);
					
					this.nature = readString(dis);
					
					this.groupement = readString(dis);
					
					this.titre = readString(dis);
					
					this.titre_court = readString(dis);
					
					this.objet = readString(dis);
					
					this.objet_social1 = readString(dis);
					
					this.objet_social2 = readString(dis);
					
					this.adrs_complement = readString(dis);
					
					this.adrs_numvoie = readString(dis);
					
					this.adrs_repetition = readString(dis);
					
					this.adrs_typevoie = readString(dis);
					
					this.adrs_libvoie = readString(dis);
					
					this.adrs_distrib = readString(dis);
					
					this.adrs_codeinsee = readString(dis);
					
					this.adrs_codepostal = readString(dis);
					
					this.adrs_libcommune = readString(dis);
					
					this.adrg_declarant = readString(dis);
					
					this.adrg_complemid = readString(dis);
					
					this.adrg_complemgeo = readString(dis);
					
					this.adrg_libvoie = readString(dis);
					
					this.adrg_distrib = readString(dis);
					
					this.adrg_codepostal = readString(dis);
					
					this.adrg_achemine = readString(dis);
					
					this.adrg_pays = readString(dis);
					
					this.dir_civilite = readString(dis);
					
					this.telephone = readString(dis);
					
					this.siteweb = readString(dis);
					
					this.email = readString(dis);
					
					this.publiweb = readString(dis);
					
					this.observation = readString(dis);
					
					this.position = readString(dis);
					
					this.maj_time = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.id_ex,dos);
					
					// String
				
						writeString(this.siret,dos);
					
					// String
				
						writeString(this.rup_mi,dos);
					
					// String
				
						writeString(this.gestion,dos);
					
					// java.util.Date
				
						writeDate(this.date_creat,dos);
					
					// java.util.Date
				
						writeDate(this.date_decla,dos);
					
					// java.util.Date
				
						writeDate(this.date_publi,dos);
					
					// java.util.Date
				
						writeDate(this.date_disso,dos);
					
					// String
				
						writeString(this.nature,dos);
					
					// String
				
						writeString(this.groupement,dos);
					
					// String
				
						writeString(this.titre,dos);
					
					// String
				
						writeString(this.titre_court,dos);
					
					// String
				
						writeString(this.objet,dos);
					
					// String
				
						writeString(this.objet_social1,dos);
					
					// String
				
						writeString(this.objet_social2,dos);
					
					// String
				
						writeString(this.adrs_complement,dos);
					
					// String
				
						writeString(this.adrs_numvoie,dos);
					
					// String
				
						writeString(this.adrs_repetition,dos);
					
					// String
				
						writeString(this.adrs_typevoie,dos);
					
					// String
				
						writeString(this.adrs_libvoie,dos);
					
					// String
				
						writeString(this.adrs_distrib,dos);
					
					// String
				
						writeString(this.adrs_codeinsee,dos);
					
					// String
				
						writeString(this.adrs_codepostal,dos);
					
					// String
				
						writeString(this.adrs_libcommune,dos);
					
					// String
				
						writeString(this.adrg_declarant,dos);
					
					// String
				
						writeString(this.adrg_complemid,dos);
					
					// String
				
						writeString(this.adrg_complemgeo,dos);
					
					// String
				
						writeString(this.adrg_libvoie,dos);
					
					// String
				
						writeString(this.adrg_distrib,dos);
					
					// String
				
						writeString(this.adrg_codepostal,dos);
					
					// String
				
						writeString(this.adrg_achemine,dos);
					
					// String
				
						writeString(this.adrg_pays,dos);
					
					// String
				
						writeString(this.dir_civilite,dos);
					
					// String
				
						writeString(this.telephone,dos);
					
					// String
				
						writeString(this.siteweb,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.publiweb,dos);
					
					// String
				
						writeString(this.observation,dos);
					
					// String
				
						writeString(this.position,dos);
					
					// java.util.Date
				
						writeDate(this.maj_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",id_ex="+id_ex);
		sb.append(",siret="+siret);
		sb.append(",rup_mi="+rup_mi);
		sb.append(",gestion="+gestion);
		sb.append(",date_creat="+String.valueOf(date_creat));
		sb.append(",date_decla="+String.valueOf(date_decla));
		sb.append(",date_publi="+String.valueOf(date_publi));
		sb.append(",date_disso="+String.valueOf(date_disso));
		sb.append(",nature="+nature);
		sb.append(",groupement="+groupement);
		sb.append(",titre="+titre);
		sb.append(",titre_court="+titre_court);
		sb.append(",objet="+objet);
		sb.append(",objet_social1="+objet_social1);
		sb.append(",objet_social2="+objet_social2);
		sb.append(",adrs_complement="+adrs_complement);
		sb.append(",adrs_numvoie="+adrs_numvoie);
		sb.append(",adrs_repetition="+adrs_repetition);
		sb.append(",adrs_typevoie="+adrs_typevoie);
		sb.append(",adrs_libvoie="+adrs_libvoie);
		sb.append(",adrs_distrib="+adrs_distrib);
		sb.append(",adrs_codeinsee="+adrs_codeinsee);
		sb.append(",adrs_codepostal="+adrs_codepostal);
		sb.append(",adrs_libcommune="+adrs_libcommune);
		sb.append(",adrg_declarant="+adrg_declarant);
		sb.append(",adrg_complemid="+adrg_complemid);
		sb.append(",adrg_complemgeo="+adrg_complemgeo);
		sb.append(",adrg_libvoie="+adrg_libvoie);
		sb.append(",adrg_distrib="+adrg_distrib);
		sb.append(",adrg_codepostal="+adrg_codepostal);
		sb.append(",adrg_achemine="+adrg_achemine);
		sb.append(",adrg_pays="+adrg_pays);
		sb.append(",dir_civilite="+dir_civilite);
		sb.append(",telephone="+telephone);
		sb.append(",siteweb="+siteweb);
		sb.append(",email="+email);
		sb.append(",publiweb="+publiweb);
		sb.append(",observation="+observation);
		sb.append(",position="+position);
		sb.append(",maj_time="+String.valueOf(maj_time));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(waldecImportStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_IMPORTASSO_integrationFichierCsv = new byte[0];
    static byte[] commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String id_ex;

				public String getId_ex () {
					return this.id_ex;
				}
				
			    public String siret;

				public String getSiret () {
					return this.siret;
				}
				
			    public String rup_mi;

				public String getRup_mi () {
					return this.rup_mi;
				}
				
			    public String gestion;

				public String getGestion () {
					return this.gestion;
				}
				
			    public String date_creat;

				public String getDate_creat () {
					return this.date_creat;
				}
				
			    public String date_decla;

				public String getDate_decla () {
					return this.date_decla;
				}
				
			    public String date_publi;

				public String getDate_publi () {
					return this.date_publi;
				}
				
			    public String date_disso;

				public String getDate_disso () {
					return this.date_disso;
				}
				
			    public String nature;

				public String getNature () {
					return this.nature;
				}
				
			    public String groupement;

				public String getGroupement () {
					return this.groupement;
				}
				
			    public String titre;

				public String getTitre () {
					return this.titre;
				}
				
			    public String titre_court;

				public String getTitre_court () {
					return this.titre_court;
				}
				
			    public String objet;

				public String getObjet () {
					return this.objet;
				}
				
			    public String objet_social1;

				public String getObjet_social1 () {
					return this.objet_social1;
				}
				
			    public String objet_social2;

				public String getObjet_social2 () {
					return this.objet_social2;
				}
				
			    public String adrs_complement;

				public String getAdrs_complement () {
					return this.adrs_complement;
				}
				
			    public String adrs_numvoie;

				public String getAdrs_numvoie () {
					return this.adrs_numvoie;
				}
				
			    public String adrs_repetition;

				public String getAdrs_repetition () {
					return this.adrs_repetition;
				}
				
			    public String adrs_typevoie;

				public String getAdrs_typevoie () {
					return this.adrs_typevoie;
				}
				
			    public String adrs_libvoie;

				public String getAdrs_libvoie () {
					return this.adrs_libvoie;
				}
				
			    public String adrs_distrib;

				public String getAdrs_distrib () {
					return this.adrs_distrib;
				}
				
			    public String adrs_codeinsee;

				public String getAdrs_codeinsee () {
					return this.adrs_codeinsee;
				}
				
			    public String adrs_codepostal;

				public String getAdrs_codepostal () {
					return this.adrs_codepostal;
				}
				
			    public String adrs_libcommune;

				public String getAdrs_libcommune () {
					return this.adrs_libcommune;
				}
				
			    public String adrg_declarant;

				public String getAdrg_declarant () {
					return this.adrg_declarant;
				}
				
			    public String adrg_complemid;

				public String getAdrg_complemid () {
					return this.adrg_complemid;
				}
				
			    public String adrg_complemgeo;

				public String getAdrg_complemgeo () {
					return this.adrg_complemgeo;
				}
				
			    public String adrg_libvoie;

				public String getAdrg_libvoie () {
					return this.adrg_libvoie;
				}
				
			    public String adrg_distrib;

				public String getAdrg_distrib () {
					return this.adrg_distrib;
				}
				
			    public String adrg_codepostal;

				public String getAdrg_codepostal () {
					return this.adrg_codepostal;
				}
				
			    public String adrg_achemine;

				public String getAdrg_achemine () {
					return this.adrg_achemine;
				}
				
			    public String adrg_pays;

				public String getAdrg_pays () {
					return this.adrg_pays;
				}
				
			    public String dir_civilite;

				public String getDir_civilite () {
					return this.dir_civilite;
				}
				
			    public String siteweb;

				public String getSiteweb () {
					return this.siteweb;
				}
				
			    public String publiweb;

				public String getPubliweb () {
					return this.publiweb;
				}
				
			    public String observation;

				public String getObservation () {
					return this.observation;
				}
				
			    public String position;

				public String getPosition () {
					return this.position;
				}
				
			    public String maj_time;

				public String getMaj_time () {
					return this.maj_time;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTASSO_integrationFichierCsv.length) {
				if(length < 1024 && commonByteArray_IMPORTASSO_integrationFichierCsv.length == 0) {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[1024];
				} else {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length);
			strReturn = new String(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTASSO_integrationFichierCsv) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.id_ex = readString(dis);
					
					this.siret = readString(dis);
					
					this.rup_mi = readString(dis);
					
					this.gestion = readString(dis);
					
					this.date_creat = readString(dis);
					
					this.date_decla = readString(dis);
					
					this.date_publi = readString(dis);
					
					this.date_disso = readString(dis);
					
					this.nature = readString(dis);
					
					this.groupement = readString(dis);
					
					this.titre = readString(dis);
					
					this.titre_court = readString(dis);
					
					this.objet = readString(dis);
					
					this.objet_social1 = readString(dis);
					
					this.objet_social2 = readString(dis);
					
					this.adrs_complement = readString(dis);
					
					this.adrs_numvoie = readString(dis);
					
					this.adrs_repetition = readString(dis);
					
					this.adrs_typevoie = readString(dis);
					
					this.adrs_libvoie = readString(dis);
					
					this.adrs_distrib = readString(dis);
					
					this.adrs_codeinsee = readString(dis);
					
					this.adrs_codepostal = readString(dis);
					
					this.adrs_libcommune = readString(dis);
					
					this.adrg_declarant = readString(dis);
					
					this.adrg_complemid = readString(dis);
					
					this.adrg_complemgeo = readString(dis);
					
					this.adrg_libvoie = readString(dis);
					
					this.adrg_distrib = readString(dis);
					
					this.adrg_codepostal = readString(dis);
					
					this.adrg_achemine = readString(dis);
					
					this.adrg_pays = readString(dis);
					
					this.dir_civilite = readString(dis);
					
					this.siteweb = readString(dis);
					
					this.publiweb = readString(dis);
					
					this.observation = readString(dis);
					
					this.position = readString(dis);
					
					this.maj_time = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.id_ex,dos);
					
					// String
				
						writeString(this.siret,dos);
					
					// String
				
						writeString(this.rup_mi,dos);
					
					// String
				
						writeString(this.gestion,dos);
					
					// String
				
						writeString(this.date_creat,dos);
					
					// String
				
						writeString(this.date_decla,dos);
					
					// String
				
						writeString(this.date_publi,dos);
					
					// String
				
						writeString(this.date_disso,dos);
					
					// String
				
						writeString(this.nature,dos);
					
					// String
				
						writeString(this.groupement,dos);
					
					// String
				
						writeString(this.titre,dos);
					
					// String
				
						writeString(this.titre_court,dos);
					
					// String
				
						writeString(this.objet,dos);
					
					// String
				
						writeString(this.objet_social1,dos);
					
					// String
				
						writeString(this.objet_social2,dos);
					
					// String
				
						writeString(this.adrs_complement,dos);
					
					// String
				
						writeString(this.adrs_numvoie,dos);
					
					// String
				
						writeString(this.adrs_repetition,dos);
					
					// String
				
						writeString(this.adrs_typevoie,dos);
					
					// String
				
						writeString(this.adrs_libvoie,dos);
					
					// String
				
						writeString(this.adrs_distrib,dos);
					
					// String
				
						writeString(this.adrs_codeinsee,dos);
					
					// String
				
						writeString(this.adrs_codepostal,dos);
					
					// String
				
						writeString(this.adrs_libcommune,dos);
					
					// String
				
						writeString(this.adrg_declarant,dos);
					
					// String
				
						writeString(this.adrg_complemid,dos);
					
					// String
				
						writeString(this.adrg_complemgeo,dos);
					
					// String
				
						writeString(this.adrg_libvoie,dos);
					
					// String
				
						writeString(this.adrg_distrib,dos);
					
					// String
				
						writeString(this.adrg_codepostal,dos);
					
					// String
				
						writeString(this.adrg_achemine,dos);
					
					// String
				
						writeString(this.adrg_pays,dos);
					
					// String
				
						writeString(this.dir_civilite,dos);
					
					// String
				
						writeString(this.siteweb,dos);
					
					// String
				
						writeString(this.publiweb,dos);
					
					// String
				
						writeString(this.observation,dos);
					
					// String
				
						writeString(this.position,dos);
					
					// String
				
						writeString(this.maj_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",id_ex="+id_ex);
		sb.append(",siret="+siret);
		sb.append(",rup_mi="+rup_mi);
		sb.append(",gestion="+gestion);
		sb.append(",date_creat="+date_creat);
		sb.append(",date_decla="+date_decla);
		sb.append(",date_publi="+date_publi);
		sb.append(",date_disso="+date_disso);
		sb.append(",nature="+nature);
		sb.append(",groupement="+groupement);
		sb.append(",titre="+titre);
		sb.append(",titre_court="+titre_court);
		sb.append(",objet="+objet);
		sb.append(",objet_social1="+objet_social1);
		sb.append(",objet_social2="+objet_social2);
		sb.append(",adrs_complement="+adrs_complement);
		sb.append(",adrs_numvoie="+adrs_numvoie);
		sb.append(",adrs_repetition="+adrs_repetition);
		sb.append(",adrs_typevoie="+adrs_typevoie);
		sb.append(",adrs_libvoie="+adrs_libvoie);
		sb.append(",adrs_distrib="+adrs_distrib);
		sb.append(",adrs_codeinsee="+adrs_codeinsee);
		sb.append(",adrs_codepostal="+adrs_codepostal);
		sb.append(",adrs_libcommune="+adrs_libcommune);
		sb.append(",adrg_declarant="+adrg_declarant);
		sb.append(",adrg_complemid="+adrg_complemid);
		sb.append(",adrg_complemgeo="+adrg_complemgeo);
		sb.append(",adrg_libvoie="+adrg_libvoie);
		sb.append(",adrg_distrib="+adrg_distrib);
		sb.append(",adrg_codepostal="+adrg_codepostal);
		sb.append(",adrg_achemine="+adrg_achemine);
		sb.append(",adrg_pays="+adrg_pays);
		sb.append(",dir_civilite="+dir_civilite);
		sb.append(",siteweb="+siteweb);
		sb.append(",publiweb="+publiweb);
		sb.append(",observation="+observation);
		sb.append(",position="+position);
		sb.append(",maj_time="+maj_time);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_IMPORTASSO_integrationFichierCsv = new byte[0];
    static byte[] commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String id_ex;

				public String getId_ex () {
					return this.id_ex;
				}
				
			    public String siret;

				public String getSiret () {
					return this.siret;
				}
				
			    public String rup_mi;

				public String getRup_mi () {
					return this.rup_mi;
				}
				
			    public String gestion;

				public String getGestion () {
					return this.gestion;
				}
				
			    public String date_creat;

				public String getDate_creat () {
					return this.date_creat;
				}
				
			    public String date_decla;

				public String getDate_decla () {
					return this.date_decla;
				}
				
			    public String date_publi;

				public String getDate_publi () {
					return this.date_publi;
				}
				
			    public String date_disso;

				public String getDate_disso () {
					return this.date_disso;
				}
				
			    public String nature;

				public String getNature () {
					return this.nature;
				}
				
			    public String groupement;

				public String getGroupement () {
					return this.groupement;
				}
				
			    public String titre;

				public String getTitre () {
					return this.titre;
				}
				
			    public String titre_court;

				public String getTitre_court () {
					return this.titre_court;
				}
				
			    public String objet;

				public String getObjet () {
					return this.objet;
				}
				
			    public String objet_social1;

				public String getObjet_social1 () {
					return this.objet_social1;
				}
				
			    public String objet_social2;

				public String getObjet_social2 () {
					return this.objet_social2;
				}
				
			    public String adrs_complement;

				public String getAdrs_complement () {
					return this.adrs_complement;
				}
				
			    public String adrs_numvoie;

				public String getAdrs_numvoie () {
					return this.adrs_numvoie;
				}
				
			    public String adrs_repetition;

				public String getAdrs_repetition () {
					return this.adrs_repetition;
				}
				
			    public String adrs_typevoie;

				public String getAdrs_typevoie () {
					return this.adrs_typevoie;
				}
				
			    public String adrs_libvoie;

				public String getAdrs_libvoie () {
					return this.adrs_libvoie;
				}
				
			    public String adrs_distrib;

				public String getAdrs_distrib () {
					return this.adrs_distrib;
				}
				
			    public String adrs_codeinsee;

				public String getAdrs_codeinsee () {
					return this.adrs_codeinsee;
				}
				
			    public String adrs_codepostal;

				public String getAdrs_codepostal () {
					return this.adrs_codepostal;
				}
				
			    public String adrs_libcommune;

				public String getAdrs_libcommune () {
					return this.adrs_libcommune;
				}
				
			    public String adrg_declarant;

				public String getAdrg_declarant () {
					return this.adrg_declarant;
				}
				
			    public String adrg_complemid;

				public String getAdrg_complemid () {
					return this.adrg_complemid;
				}
				
			    public String adrg_complemgeo;

				public String getAdrg_complemgeo () {
					return this.adrg_complemgeo;
				}
				
			    public String adrg_libvoie;

				public String getAdrg_libvoie () {
					return this.adrg_libvoie;
				}
				
			    public String adrg_distrib;

				public String getAdrg_distrib () {
					return this.adrg_distrib;
				}
				
			    public String adrg_codepostal;

				public String getAdrg_codepostal () {
					return this.adrg_codepostal;
				}
				
			    public String adrg_achemine;

				public String getAdrg_achemine () {
					return this.adrg_achemine;
				}
				
			    public String adrg_pays;

				public String getAdrg_pays () {
					return this.adrg_pays;
				}
				
			    public String dir_civilite;

				public String getDir_civilite () {
					return this.dir_civilite;
				}
				
			    public String siteweb;

				public String getSiteweb () {
					return this.siteweb;
				}
				
			    public String publiweb;

				public String getPubliweb () {
					return this.publiweb;
				}
				
			    public String observation;

				public String getObservation () {
					return this.observation;
				}
				
			    public String position;

				public String getPosition () {
					return this.position;
				}
				
			    public String maj_time;

				public String getMaj_time () {
					return this.maj_time;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.id = this.id;
	            other.id_ex = this.id_ex;
	            other.siret = this.siret;
	            other.rup_mi = this.rup_mi;
	            other.gestion = this.gestion;
	            other.date_creat = this.date_creat;
	            other.date_decla = this.date_decla;
	            other.date_publi = this.date_publi;
	            other.date_disso = this.date_disso;
	            other.nature = this.nature;
	            other.groupement = this.groupement;
	            other.titre = this.titre;
	            other.titre_court = this.titre_court;
	            other.objet = this.objet;
	            other.objet_social1 = this.objet_social1;
	            other.objet_social2 = this.objet_social2;
	            other.adrs_complement = this.adrs_complement;
	            other.adrs_numvoie = this.adrs_numvoie;
	            other.adrs_repetition = this.adrs_repetition;
	            other.adrs_typevoie = this.adrs_typevoie;
	            other.adrs_libvoie = this.adrs_libvoie;
	            other.adrs_distrib = this.adrs_distrib;
	            other.adrs_codeinsee = this.adrs_codeinsee;
	            other.adrs_codepostal = this.adrs_codepostal;
	            other.adrs_libcommune = this.adrs_libcommune;
	            other.adrg_declarant = this.adrg_declarant;
	            other.adrg_complemid = this.adrg_complemid;
	            other.adrg_complemgeo = this.adrg_complemgeo;
	            other.adrg_libvoie = this.adrg_libvoie;
	            other.adrg_distrib = this.adrg_distrib;
	            other.adrg_codepostal = this.adrg_codepostal;
	            other.adrg_achemine = this.adrg_achemine;
	            other.adrg_pays = this.adrg_pays;
	            other.dir_civilite = this.dir_civilite;
	            other.siteweb = this.siteweb;
	            other.publiweb = this.publiweb;
	            other.observation = this.observation;
	            other.position = this.position;
	            other.maj_time = this.maj_time;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTASSO_integrationFichierCsv.length) {
				if(length < 1024 && commonByteArray_IMPORTASSO_integrationFichierCsv.length == 0) {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[1024];
				} else {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length);
			strReturn = new String(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTASSO_integrationFichierCsv) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.id_ex = readString(dis);
					
					this.siret = readString(dis);
					
					this.rup_mi = readString(dis);
					
					this.gestion = readString(dis);
					
					this.date_creat = readString(dis);
					
					this.date_decla = readString(dis);
					
					this.date_publi = readString(dis);
					
					this.date_disso = readString(dis);
					
					this.nature = readString(dis);
					
					this.groupement = readString(dis);
					
					this.titre = readString(dis);
					
					this.titre_court = readString(dis);
					
					this.objet = readString(dis);
					
					this.objet_social1 = readString(dis);
					
					this.objet_social2 = readString(dis);
					
					this.adrs_complement = readString(dis);
					
					this.adrs_numvoie = readString(dis);
					
					this.adrs_repetition = readString(dis);
					
					this.adrs_typevoie = readString(dis);
					
					this.adrs_libvoie = readString(dis);
					
					this.adrs_distrib = readString(dis);
					
					this.adrs_codeinsee = readString(dis);
					
					this.adrs_codepostal = readString(dis);
					
					this.adrs_libcommune = readString(dis);
					
					this.adrg_declarant = readString(dis);
					
					this.adrg_complemid = readString(dis);
					
					this.adrg_complemgeo = readString(dis);
					
					this.adrg_libvoie = readString(dis);
					
					this.adrg_distrib = readString(dis);
					
					this.adrg_codepostal = readString(dis);
					
					this.adrg_achemine = readString(dis);
					
					this.adrg_pays = readString(dis);
					
					this.dir_civilite = readString(dis);
					
					this.siteweb = readString(dis);
					
					this.publiweb = readString(dis);
					
					this.observation = readString(dis);
					
					this.position = readString(dis);
					
					this.maj_time = readString(dis);
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.id_ex,dos);
					
					// String
				
						writeString(this.siret,dos);
					
					// String
				
						writeString(this.rup_mi,dos);
					
					// String
				
						writeString(this.gestion,dos);
					
					// String
				
						writeString(this.date_creat,dos);
					
					// String
				
						writeString(this.date_decla,dos);
					
					// String
				
						writeString(this.date_publi,dos);
					
					// String
				
						writeString(this.date_disso,dos);
					
					// String
				
						writeString(this.nature,dos);
					
					// String
				
						writeString(this.groupement,dos);
					
					// String
				
						writeString(this.titre,dos);
					
					// String
				
						writeString(this.titre_court,dos);
					
					// String
				
						writeString(this.objet,dos);
					
					// String
				
						writeString(this.objet_social1,dos);
					
					// String
				
						writeString(this.objet_social2,dos);
					
					// String
				
						writeString(this.adrs_complement,dos);
					
					// String
				
						writeString(this.adrs_numvoie,dos);
					
					// String
				
						writeString(this.adrs_repetition,dos);
					
					// String
				
						writeString(this.adrs_typevoie,dos);
					
					// String
				
						writeString(this.adrs_libvoie,dos);
					
					// String
				
						writeString(this.adrs_distrib,dos);
					
					// String
				
						writeString(this.adrs_codeinsee,dos);
					
					// String
				
						writeString(this.adrs_codepostal,dos);
					
					// String
				
						writeString(this.adrs_libcommune,dos);
					
					// String
				
						writeString(this.adrg_declarant,dos);
					
					// String
				
						writeString(this.adrg_complemid,dos);
					
					// String
				
						writeString(this.adrg_complemgeo,dos);
					
					// String
				
						writeString(this.adrg_libvoie,dos);
					
					// String
				
						writeString(this.adrg_distrib,dos);
					
					// String
				
						writeString(this.adrg_codepostal,dos);
					
					// String
				
						writeString(this.adrg_achemine,dos);
					
					// String
				
						writeString(this.adrg_pays,dos);
					
					// String
				
						writeString(this.dir_civilite,dos);
					
					// String
				
						writeString(this.siteweb,dos);
					
					// String
				
						writeString(this.publiweb,dos);
					
					// String
				
						writeString(this.observation,dos);
					
					// String
				
						writeString(this.position,dos);
					
					// String
				
						writeString(this.maj_time,dos);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",id_ex="+id_ex);
		sb.append(",siret="+siret);
		sb.append(",rup_mi="+rup_mi);
		sb.append(",gestion="+gestion);
		sb.append(",date_creat="+date_creat);
		sb.append(",date_decla="+date_decla);
		sb.append(",date_publi="+date_publi);
		sb.append(",date_disso="+date_disso);
		sb.append(",nature="+nature);
		sb.append(",groupement="+groupement);
		sb.append(",titre="+titre);
		sb.append(",titre_court="+titre_court);
		sb.append(",objet="+objet);
		sb.append(",objet_social1="+objet_social1);
		sb.append(",objet_social2="+objet_social2);
		sb.append(",adrs_complement="+adrs_complement);
		sb.append(",adrs_numvoie="+adrs_numvoie);
		sb.append(",adrs_repetition="+adrs_repetition);
		sb.append(",adrs_typevoie="+adrs_typevoie);
		sb.append(",adrs_libvoie="+adrs_libvoie);
		sb.append(",adrs_distrib="+adrs_distrib);
		sb.append(",adrs_codeinsee="+adrs_codeinsee);
		sb.append(",adrs_codepostal="+adrs_codepostal);
		sb.append(",adrs_libcommune="+adrs_libcommune);
		sb.append(",adrg_declarant="+adrg_declarant);
		sb.append(",adrg_complemid="+adrg_complemid);
		sb.append(",adrg_complemgeo="+adrg_complemgeo);
		sb.append(",adrg_libvoie="+adrg_libvoie);
		sb.append(",adrg_distrib="+adrg_distrib);
		sb.append(",adrg_codepostal="+adrg_codepostal);
		sb.append(",adrg_achemine="+adrg_achemine);
		sb.append(",adrg_pays="+adrg_pays);
		sb.append(",dir_civilite="+dir_civilite);
		sb.append(",siteweb="+siteweb);
		sb.append(",publiweb="+publiweb);
		sb.append(",observation="+observation);
		sb.append(",position="+position);
		sb.append(",maj_time="+maj_time);
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
waldecImportStruct waldecImport = new waldecImportStruct();
row4Struct row4 = new row4Struct();



	
	/**
	 * [tFileList_2 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_2", false);
		start_Hash.put("tFileList_2", System.currentTimeMillis());
		
	
	currentComponent="tFileList_2";

	
		int tos_count_tFileList_2 = 0;
		
	
 
     
    
  String directory_tFileList_2 = context.waldec_association_file;
  final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_2.add("*.csv");  
  for (final String filemask_tFileList_2 : maskList_tFileList_2) {
	String filemask_compile_tFileList_2 = filemask_tFileList_2;
	
		filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern.compile(filemask_compile_tFileList_2);
	patternList_tFileList_2.add(fileNamePattern_tFileList_2);
  }
  int NB_FILEtFileList_2 = 0;

  final boolean case_sensitive_tFileList_2 = true;
    final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
	java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);
     
		file_tFileList_2.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_2 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
          	if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()){
					if(!filePath_tFileList_2.contains(file.getAbsolutePath())) {
			          list_tFileList_2.add(file);
			          filePath_tFileList_2.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_2);
    
    for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++){
      java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
      String fileName_tFileList_2 = files_tFileList_2.getName();
      
      String currentFileName_tFileList_2 = files_tFileList_2.getName(); 
      String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
      String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
      String currentFileExtension_tFileList_2 = null;
      
      if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()){
        currentFileExtension_tFileList_2 = files_tFileList_2.getName().substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_2 = "";
      }
      
      NB_FILEtFileList_2 ++;
      globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
      globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
      
 



/**
 * [tFileList_2 begin ] stop
 */
	
	/**
	 * [tFileList_2 main ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 


	tos_count_tFileList_2++;

/**
 * [tFileList_2 main ] stop
 */
	
	/**
	 * [tFileList_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("waldecImport", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileInputDelimited_2);
					//Thread.sleep(1000);
				}				
			



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("waldecImport" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = "waldec_association";
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + "waldec_association";
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_2=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"id\",\"id_ex\",\"siret\",\"rup_mi\",\"gestion\",\"date_creat\",\"date_decla\",\"date_publi\",\"date_disso\",\"nature\",\"groupement\",\"titre\",\"titre_court\",\"objet\",\"objet_social1\",\"objet_social2\",\"adrs_complement\",\"adrs_numvoie\",\"adrs_repetition\",\"adrs_typevoie\",\"adrs_libvoie\",\"adrs_distrib\",\"adrs_codeinsee\",\"adrs_codepostal\",\"adrs_libcommune\",\"adrg_declarant\",\"adrg_complemid\",\"adrg_complemgeo\",\"adrg_libvoie\",\"adrg_distrib\",\"adrg_codepostal\",\"adrg_achemine\",\"adrg_pays\",\"dir_civilite\",\"telephone\",\"siteweb\",\"email\",\"publiweb\",\"observation\",\"position\",\"maj_time\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"id_ex\" = ?,\"siret\" = ?,\"rup_mi\" = ?,\"gestion\" = ?,\"date_creat\" = ?,\"date_decla\" = ?,\"date_publi\" = ?,\"date_disso\" = ?,\"nature\" = ?,\"groupement\" = ?,\"titre\" = ?,\"titre_court\" = ?,\"objet\" = ?,\"objet_social1\" = ?,\"objet_social2\" = ?,\"adrs_complement\" = ?,\"adrs_numvoie\" = ?,\"adrs_repetition\" = ?,\"adrs_typevoie\" = ?,\"adrs_libvoie\" = ?,\"adrs_distrib\" = ?,\"adrs_codeinsee\" = ?,\"adrs_codepostal\" = ?,\"adrs_libcommune\" = ?,\"adrg_declarant\" = ?,\"adrg_complemid\" = ?,\"adrg_complemgeo\" = ?,\"adrg_libvoie\" = ?,\"adrg_distrib\" = ?,\"adrg_codepostal\" = ?,\"adrg_achemine\" = ?,\"adrg_pays\" = ?,\"dir_civilite\" = ?,\"telephone\" = ?,\"siteweb\" = ?,\"email\" = ?,\"publiweb\" = ?,\"observation\" = ?,\"position\" = ?,\"maj_time\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
waldecImportStruct waldecImport_tmp = new waldecImportStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(((String)globalMap.get("tFileList_2_CURRENT_FILEPATH")) + ".rejet")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
    if(filetFileOutputDelimited_1.exists()){
            throw new RuntimeException("The particular file \""+filetFileOutputDelimited_1.getAbsoluteFile() +
            "\" already exist. If you want to overwrite the file, please uncheck the" + 
            " \"Throw an error if the file already exist\" option in Advanced settings.");
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */((String)globalMap.get("tFileList_2_CURRENT_FILEPATH"))/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
						String[] rowtFileInputDelimited_2=null;
						int currentLinetFileInputDelimited_2 = 0;
	        			int outputLinetFileInputDelimited_2 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0;
			if(footer_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_2[0]);
		        			}
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
								rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
								if(!(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
		        		}else{
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_2[0]);
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < 1;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
	        	
					
	        			if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row3 = null;			
								
	    							row4 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row3 = new row3Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row3.id = null;
					
							row3.id_ex = null;
					
							row3.siret = null;
					
							row3.rup_mi = null;
					
							row3.gestion = null;
					
							row3.date_creat = null;
					
							row3.date_decla = null;
					
							row3.date_publi = null;
					
							row3.date_disso = null;
					
							row3.nature = null;
					
							row3.groupement = null;
					
							row3.titre = null;
					
							row3.titre_court = null;
					
							row3.objet = null;
					
							row3.objet_social1 = null;
					
							row3.objet_social2 = null;
					
							row3.adrs_complement = null;
					
							row3.adrs_numvoie = null;
					
							row3.adrs_repetition = null;
					
							row3.adrs_typevoie = null;
					
							row3.adrs_libvoie = null;
					
							row3.adrs_distrib = null;
					
							row3.adrs_codeinsee = null;
					
							row3.adrs_codepostal = null;
					
							row3.adrs_libcommune = null;
					
							row3.adrg_declarant = null;
					
							row3.adrg_complemid = null;
					
							row3.adrg_complemgeo = null;
					
							row3.adrg_libvoie = null;
					
							row3.adrg_distrib = null;
					
							row3.adrg_codepostal = null;
					
							row3.adrg_achemine = null;
					
							row3.adrg_pays = null;
					
							row3.dir_civilite = null;
					
							row3.siteweb = null;
					
							row3.publiweb = null;
					
							row3.observation = null;
					
							row3.position = null;
					
							row3.maj_time = null;
					
				}else{
					
					for(int i_tFileInputDelimited_2=0;i_tFileInputDelimited_2<rowtFileInputDelimited_2.length;i_tFileInputDelimited_2++){
						rowtFileInputDelimited_2[i_tFileInputDelimited_2]=rowtFileInputDelimited_2[i_tFileInputDelimited_2].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.id = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.id = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.id_ex = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.id_ex = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.siret = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.siret = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.rup_mi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.rup_mi = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.gestion = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.gestion = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.date_creat = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.date_creat = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.date_decla = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.date_decla = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.date_publi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.date_publi = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.date_disso = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.date_disso = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.nature = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.nature = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.groupement = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.groupement = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.titre = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.titre = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.titre_court = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.titre_court = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.objet = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.objet = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.objet_social1 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.objet_social1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.objet_social2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.objet_social2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrs_complement = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrs_complement = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrs_numvoie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrs_numvoie = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrs_repetition = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrs_repetition = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrs_typevoie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrs_typevoie = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrs_libvoie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrs_libvoie = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrs_distrib = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrs_distrib = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrs_codeinsee = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrs_codeinsee = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrs_codepostal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrs_codepostal = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrs_libcommune = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrs_libcommune = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrg_declarant = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrg_declarant = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrg_complemid = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrg_complemid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrg_complemgeo = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrg_complemgeo = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrg_libvoie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrg_libvoie = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrg_distrib = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrg_distrib = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrg_codepostal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrg_codepostal = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrg_achemine = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrg_achemine = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.adrg_pays = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.adrg_pays = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.dir_civilite = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.dir_civilite = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.siteweb = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.siteweb = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.publiweb = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.publiweb = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.observation = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.observation = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.position = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.position = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row3.maj_time = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row3.maj_time = null;
							
						
						}
						
						
					
				}
				
 					int filedsum = rowtFileInputDelimited_2.length;
 					if(filedsum < (39 )){
 						throw new java.lang.Exception("Column(s) missing");
 					} else if(filedsum > (39 )) {
 						throw new RuntimeException("Too many columns");
 					}     
				
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_2 = true;
        							
						                    row4 = new row4Struct();
                							
    				row4.id = row3.id;
				
    				row4.id_ex = row3.id_ex;
				
    				row4.siret = row3.siret;
				
    				row4.rup_mi = row3.rup_mi;
				
    				row4.gestion = row3.gestion;
				
    				row4.date_creat = row3.date_creat;
				
    				row4.date_decla = row3.date_decla;
				
    				row4.date_publi = row3.date_publi;
				
    				row4.date_disso = row3.date_disso;
				
    				row4.nature = row3.nature;
				
    				row4.groupement = row3.groupement;
				
    				row4.titre = row3.titre;
				
    				row4.titre_court = row3.titre_court;
				
    				row4.objet = row3.objet;
				
    				row4.objet_social1 = row3.objet_social1;
				
    				row4.objet_social2 = row3.objet_social2;
				
    				row4.adrs_complement = row3.adrs_complement;
				
    				row4.adrs_numvoie = row3.adrs_numvoie;
				
    				row4.adrs_repetition = row3.adrs_repetition;
				
    				row4.adrs_typevoie = row3.adrs_typevoie;
				
    				row4.adrs_libvoie = row3.adrs_libvoie;
				
    				row4.adrs_distrib = row3.adrs_distrib;
				
    				row4.adrs_codeinsee = row3.adrs_codeinsee;
				
    				row4.adrs_codepostal = row3.adrs_codepostal;
				
    				row4.adrs_libcommune = row3.adrs_libcommune;
				
    				row4.adrg_declarant = row3.adrg_declarant;
				
    				row4.adrg_complemid = row3.adrg_complemid;
				
    				row4.adrg_complemgeo = row3.adrg_complemgeo;
				
    				row4.adrg_libvoie = row3.adrg_libvoie;
				
    				row4.adrg_distrib = row3.adrg_distrib;
				
    				row4.adrg_codepostal = row3.adrg_codepostal;
				
    				row4.adrg_achemine = row3.adrg_achemine;
				
    				row4.adrg_pays = row3.adrg_pays;
				
    				row4.dir_civilite = row3.dir_civilite;
				
    				row4.siteweb = row3.siteweb;
				
    				row4.publiweb = row3.publiweb;
				
    				row4.observation = row3.observation;
				
    				row4.position = row3.position;
				
    				row4.maj_time = row3.maj_time;
				
			
                							row4.errorMessage = e.getMessage() + " - Line: " + tos_count_tFileInputDelimited_2;
                							row3 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

waldecImport = null;


// # Output table : 'waldecImport'
waldecImport_tmp.id = row3.id;
waldecImport_tmp.id_ex = row3.id_ex;
waldecImport_tmp.siret = row3.siret;
waldecImport_tmp.rup_mi = row3.rup_mi;
waldecImport_tmp.gestion = row3.gestion;
waldecImport_tmp.date_creat = row3.date_creat != null && !row3.date_creat.isEmpty() ? 
new SimpleDateFormat("yyyy-MM-dd").parse(row3.date_creat) : null; ;
waldecImport_tmp.date_decla = row3.date_decla != null && !row3.date_decla.isEmpty() ? 
new SimpleDateFormat("yyyy-MM-dd").parse(row3.date_decla) : null; ;
waldecImport_tmp.date_publi = row3.date_publi != null && !row3.date_publi.isEmpty() ? 
new SimpleDateFormat("yyyy-MM-dd").parse(row3.date_publi) : null; ;
waldecImport_tmp.date_disso = row3.date_disso != null && !row3.date_disso.isEmpty() ? 
new SimpleDateFormat("yyyy-MM-dd").parse(row3.date_disso) : null; ;
waldecImport_tmp.nature = row3.nature;
waldecImport_tmp.groupement = row3.groupement;
waldecImport_tmp.titre = row3.titre;
waldecImport_tmp.titre_court = row3.titre_court;
waldecImport_tmp.objet = row3.objet;
waldecImport_tmp.objet_social1 = row3.objet_social1;
waldecImport_tmp.objet_social2 = row3.objet_social2;
waldecImport_tmp.adrs_complement = row3.adrs_complement;
waldecImport_tmp.adrs_numvoie = row3.adrs_numvoie;
waldecImport_tmp.adrs_repetition = row3.adrs_repetition;
waldecImport_tmp.adrs_typevoie = row3.adrs_typevoie;
waldecImport_tmp.adrs_libvoie = row3.adrs_libvoie;
waldecImport_tmp.adrs_distrib = row3.adrs_distrib;
waldecImport_tmp.adrs_codeinsee = row3.adrs_codeinsee;
waldecImport_tmp.adrs_codepostal = row3.adrs_codepostal;
waldecImport_tmp.adrs_libcommune = row3.adrs_libcommune;
waldecImport_tmp.adrg_declarant = row3.adrg_declarant;
waldecImport_tmp.adrg_complemid = row3.adrg_complemid;
waldecImport_tmp.adrg_complemgeo = row3.adrg_complemgeo;
waldecImport_tmp.adrg_libvoie = row3.adrg_libvoie;
waldecImport_tmp.adrg_distrib = row3.adrg_distrib;
waldecImport_tmp.adrg_codepostal = row3.adrg_codepostal;
waldecImport_tmp.adrg_achemine = row3.adrg_achemine;
waldecImport_tmp.adrg_pays = row3.adrg_pays;
waldecImport_tmp.dir_civilite = row3.dir_civilite;
waldecImport_tmp.telephone = "";
waldecImport_tmp.siteweb = row3.siteweb;
waldecImport_tmp.email = "";
waldecImport_tmp.publiweb = row3.publiweb;
waldecImport_tmp.observation = row3.observation;
waldecImport_tmp.position = row3.position;
waldecImport_tmp.maj_time = row3.maj_time != null && !row3.maj_time.isEmpty() ? 
new SimpleDateFormat("yyyy-MM-dd").parse(row3.maj_time) : null; ;
waldecImport = waldecImport_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "waldecImport"
if(waldecImport != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//waldecImport
			//waldecImport


			
				if(execStat){
					runStat.updateStatOnConnection("waldecImport"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_2 = false;
                    if(waldecImport.id == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, waldecImport.id);
}

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        if(waldecImport.id_ex == null) {
pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(1, waldecImport.id_ex);
}

                        if(waldecImport.siret == null) {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(2, waldecImport.siret);
}

                        if(waldecImport.rup_mi == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(3, waldecImport.rup_mi);
}

                        if(waldecImport.gestion == null) {
pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(4, waldecImport.gestion);
}

                        if(waldecImport.date_creat != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(5, new java.sql.Timestamp(waldecImport.date_creat.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(waldecImport.date_decla != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(6, new java.sql.Timestamp(waldecImport.date_decla.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(waldecImport.date_publi != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(7, new java.sql.Timestamp(waldecImport.date_publi.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(waldecImport.date_disso != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(8, new java.sql.Timestamp(waldecImport.date_disso.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(waldecImport.nature == null) {
pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(9, waldecImport.nature);
}

                        if(waldecImport.groupement == null) {
pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(10, waldecImport.groupement);
}

                        if(waldecImport.titre == null) {
pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(11, waldecImport.titre);
}

                        if(waldecImport.titre_court == null) {
pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(12, waldecImport.titre_court);
}

                        if(waldecImport.objet == null) {
pstmtUpdate_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(13, waldecImport.objet);
}

                        if(waldecImport.objet_social1 == null) {
pstmtUpdate_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(14, waldecImport.objet_social1);
}

                        if(waldecImport.objet_social2 == null) {
pstmtUpdate_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(15, waldecImport.objet_social2);
}

                        if(waldecImport.adrs_complement == null) {
pstmtUpdate_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(16, waldecImport.adrs_complement);
}

                        if(waldecImport.adrs_numvoie == null) {
pstmtUpdate_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(17, waldecImport.adrs_numvoie);
}

                        if(waldecImport.adrs_repetition == null) {
pstmtUpdate_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(18, waldecImport.adrs_repetition);
}

                        if(waldecImport.adrs_typevoie == null) {
pstmtUpdate_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(19, waldecImport.adrs_typevoie);
}

                        if(waldecImport.adrs_libvoie == null) {
pstmtUpdate_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(20, waldecImport.adrs_libvoie);
}

                        if(waldecImport.adrs_distrib == null) {
pstmtUpdate_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(21, waldecImport.adrs_distrib);
}

                        if(waldecImport.adrs_codeinsee == null) {
pstmtUpdate_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(22, waldecImport.adrs_codeinsee);
}

                        if(waldecImport.adrs_codepostal == null) {
pstmtUpdate_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(23, waldecImport.adrs_codepostal);
}

                        if(waldecImport.adrs_libcommune == null) {
pstmtUpdate_tDBOutput_2.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(24, waldecImport.adrs_libcommune);
}

                        if(waldecImport.adrg_declarant == null) {
pstmtUpdate_tDBOutput_2.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(25, waldecImport.adrg_declarant);
}

                        if(waldecImport.adrg_complemid == null) {
pstmtUpdate_tDBOutput_2.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(26, waldecImport.adrg_complemid);
}

                        if(waldecImport.adrg_complemgeo == null) {
pstmtUpdate_tDBOutput_2.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(27, waldecImport.adrg_complemgeo);
}

                        if(waldecImport.adrg_libvoie == null) {
pstmtUpdate_tDBOutput_2.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(28, waldecImport.adrg_libvoie);
}

                        if(waldecImport.adrg_distrib == null) {
pstmtUpdate_tDBOutput_2.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(29, waldecImport.adrg_distrib);
}

                        if(waldecImport.adrg_codepostal == null) {
pstmtUpdate_tDBOutput_2.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(30, waldecImport.adrg_codepostal);
}

                        if(waldecImport.adrg_achemine == null) {
pstmtUpdate_tDBOutput_2.setNull(31, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(31, waldecImport.adrg_achemine);
}

                        if(waldecImport.adrg_pays == null) {
pstmtUpdate_tDBOutput_2.setNull(32, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(32, waldecImport.adrg_pays);
}

                        if(waldecImport.dir_civilite == null) {
pstmtUpdate_tDBOutput_2.setNull(33, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(33, waldecImport.dir_civilite);
}

                        if(waldecImport.telephone == null) {
pstmtUpdate_tDBOutput_2.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(34, waldecImport.telephone);
}

                        if(waldecImport.siteweb == null) {
pstmtUpdate_tDBOutput_2.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(35, waldecImport.siteweb);
}

                        if(waldecImport.email == null) {
pstmtUpdate_tDBOutput_2.setNull(36, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(36, waldecImport.email);
}

                        if(waldecImport.publiweb == null) {
pstmtUpdate_tDBOutput_2.setNull(37, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(37, waldecImport.publiweb);
}

                        if(waldecImport.observation == null) {
pstmtUpdate_tDBOutput_2.setNull(38, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(38, waldecImport.observation);
}

                        if(waldecImport.position == null) {
pstmtUpdate_tDBOutput_2.setNull(39, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(39, waldecImport.position);
}

                        if(waldecImport.maj_time != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(40, new java.sql.Timestamp(waldecImport.maj_time.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(40, java.sql.Types.TIMESTAMP);
}

                        if(waldecImport.id == null) {
pstmtUpdate_tDBOutput_2.setNull(41 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(41 + count_tDBOutput_2, waldecImport.id);
}

                try {
					
                    updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2 + pstmtUpdate_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(waldecImport.id == null) {
pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(1, waldecImport.id);
}

                        if(waldecImport.id_ex == null) {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(2, waldecImport.id_ex);
}

                        if(waldecImport.siret == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, waldecImport.siret);
}

                        if(waldecImport.rup_mi == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, waldecImport.rup_mi);
}

                        if(waldecImport.gestion == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, waldecImport.gestion);
}

                        if(waldecImport.date_creat != null) {
pstmtInsert_tDBOutput_2.setTimestamp(6, new java.sql.Timestamp(waldecImport.date_creat.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(waldecImport.date_decla != null) {
pstmtInsert_tDBOutput_2.setTimestamp(7, new java.sql.Timestamp(waldecImport.date_decla.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(waldecImport.date_publi != null) {
pstmtInsert_tDBOutput_2.setTimestamp(8, new java.sql.Timestamp(waldecImport.date_publi.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(waldecImport.date_disso != null) {
pstmtInsert_tDBOutput_2.setTimestamp(9, new java.sql.Timestamp(waldecImport.date_disso.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.TIMESTAMP);
}

                        if(waldecImport.nature == null) {
pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(10, waldecImport.nature);
}

                        if(waldecImport.groupement == null) {
pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(11, waldecImport.groupement);
}

                        if(waldecImport.titre == null) {
pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(12, waldecImport.titre);
}

                        if(waldecImport.titre_court == null) {
pstmtInsert_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(13, waldecImport.titre_court);
}

                        if(waldecImport.objet == null) {
pstmtInsert_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(14, waldecImport.objet);
}

                        if(waldecImport.objet_social1 == null) {
pstmtInsert_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(15, waldecImport.objet_social1);
}

                        if(waldecImport.objet_social2 == null) {
pstmtInsert_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(16, waldecImport.objet_social2);
}

                        if(waldecImport.adrs_complement == null) {
pstmtInsert_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(17, waldecImport.adrs_complement);
}

                        if(waldecImport.adrs_numvoie == null) {
pstmtInsert_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(18, waldecImport.adrs_numvoie);
}

                        if(waldecImport.adrs_repetition == null) {
pstmtInsert_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(19, waldecImport.adrs_repetition);
}

                        if(waldecImport.adrs_typevoie == null) {
pstmtInsert_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(20, waldecImport.adrs_typevoie);
}

                        if(waldecImport.adrs_libvoie == null) {
pstmtInsert_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(21, waldecImport.adrs_libvoie);
}

                        if(waldecImport.adrs_distrib == null) {
pstmtInsert_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(22, waldecImport.adrs_distrib);
}

                        if(waldecImport.adrs_codeinsee == null) {
pstmtInsert_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(23, waldecImport.adrs_codeinsee);
}

                        if(waldecImport.adrs_codepostal == null) {
pstmtInsert_tDBOutput_2.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(24, waldecImport.adrs_codepostal);
}

                        if(waldecImport.adrs_libcommune == null) {
pstmtInsert_tDBOutput_2.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(25, waldecImport.adrs_libcommune);
}

                        if(waldecImport.adrg_declarant == null) {
pstmtInsert_tDBOutput_2.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(26, waldecImport.adrg_declarant);
}

                        if(waldecImport.adrg_complemid == null) {
pstmtInsert_tDBOutput_2.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(27, waldecImport.adrg_complemid);
}

                        if(waldecImport.adrg_complemgeo == null) {
pstmtInsert_tDBOutput_2.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(28, waldecImport.adrg_complemgeo);
}

                        if(waldecImport.adrg_libvoie == null) {
pstmtInsert_tDBOutput_2.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(29, waldecImport.adrg_libvoie);
}

                        if(waldecImport.adrg_distrib == null) {
pstmtInsert_tDBOutput_2.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(30, waldecImport.adrg_distrib);
}

                        if(waldecImport.adrg_codepostal == null) {
pstmtInsert_tDBOutput_2.setNull(31, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(31, waldecImport.adrg_codepostal);
}

                        if(waldecImport.adrg_achemine == null) {
pstmtInsert_tDBOutput_2.setNull(32, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(32, waldecImport.adrg_achemine);
}

                        if(waldecImport.adrg_pays == null) {
pstmtInsert_tDBOutput_2.setNull(33, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(33, waldecImport.adrg_pays);
}

                        if(waldecImport.dir_civilite == null) {
pstmtInsert_tDBOutput_2.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(34, waldecImport.dir_civilite);
}

                        if(waldecImport.telephone == null) {
pstmtInsert_tDBOutput_2.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(35, waldecImport.telephone);
}

                        if(waldecImport.siteweb == null) {
pstmtInsert_tDBOutput_2.setNull(36, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(36, waldecImport.siteweb);
}

                        if(waldecImport.email == null) {
pstmtInsert_tDBOutput_2.setNull(37, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(37, waldecImport.email);
}

                        if(waldecImport.publiweb == null) {
pstmtInsert_tDBOutput_2.setNull(38, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(38, waldecImport.publiweb);
}

                        if(waldecImport.observation == null) {
pstmtInsert_tDBOutput_2.setNull(39, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(39, waldecImport.observation);
}

                        if(waldecImport.position == null) {
pstmtInsert_tDBOutput_2.setNull(40, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(40, waldecImport.position);
}

                        if(waldecImport.maj_time != null) {
pstmtInsert_tDBOutput_2.setTimestamp(41, new java.sql.Timestamp(waldecImport.maj_time.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(41, java.sql.Types.TIMESTAMP);
}

                try {
					
                    insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmtInsert_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "waldecImport"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row3"




// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row4.id != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.id_ex != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.id_ex
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.siret != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.siret
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.rup_mi != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.rup_mi
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.gestion != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.gestion
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.date_creat != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.date_creat
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.date_decla != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.date_decla
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.date_publi != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.date_publi
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.date_disso != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.date_disso
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.nature != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.nature
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.groupement != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.groupement
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.titre != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.titre
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.titre_court != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.titre_court
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.objet != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.objet
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.objet_social1 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.objet_social1
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.objet_social2 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.objet_social2
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrs_complement != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrs_complement
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrs_numvoie != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrs_numvoie
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrs_repetition != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrs_repetition
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrs_typevoie != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrs_typevoie
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrs_libvoie != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrs_libvoie
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrs_distrib != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrs_distrib
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrs_codeinsee != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrs_codeinsee
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrs_codepostal != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrs_codepostal
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrs_libcommune != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrs_libcommune
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrg_declarant != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrg_declarant
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrg_complemid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrg_complemid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrg_complemgeo != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrg_complemgeo
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrg_libvoie != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrg_libvoie
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrg_distrib != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrg_distrib
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrg_codepostal != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrg_codepostal
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrg_achemine != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrg_achemine
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.adrg_pays != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.adrg_pays
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.dir_civilite != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.dir_civilite
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.siteweb != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.siteweb
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.publiweb != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.publiweb
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.observation != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.observation
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.position != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.position
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.maj_time != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.maj_time
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.errorCode != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.errorCode
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.errorMessage != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.errorMessage
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("waldecImport"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */







	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileInputDelimited_2);
						}				
					




	
	/**
	 * [tFileList_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_end ] stop
 */
	
	/**
	 * [tFileList_2 end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

  
    }
  globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
  

  
 

 

ok_Hash.put("tFileList_2", true);
end_Hash.put("tFileList_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBCommit_1Process(globalMap);



/**
 * [tFileList_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_2 finally ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */







	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_1.commit();
			
	
		}finally{
			
			conn_tDBCommit_1.close();
			
	    }
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileInputProperties_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_IMPORTASSO_integrationFichierCsv = new byte[0];
    static byte[] commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTASSO_integrationFichierCsv.length) {
				if(length < 1024 && commonByteArray_IMPORTASSO_integrationFichierCsv.length == 0) {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[1024];
				} else {
   					commonByteArray_IMPORTASSO_integrationFichierCsv = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length);
			strReturn = new String(commonByteArray_IMPORTASSO_integrationFichierCsv, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTASSO_integrationFichierCsv) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputProperties_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputProperties_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputProperties_1", false);
		start_Hash.put("tFileInputProperties_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputProperties_1";

	
		int tos_count_tFileInputProperties_1 = 0;
		

	java.io.File file_tFileInputProperties_1 = new java.io.File(context.properties_filepath);
	int nb_line_tFileInputProperties_1 = 0;
	java.util.Properties properties_tFileInputProperties_1 = new java.util.Properties();
	java.io.FileInputStream fis_tFileInputProperties_1=new java.io.FileInputStream(file_tFileInputProperties_1);
   	try{
		properties_tFileInputProperties_1.load(fis_tFileInputProperties_1);
		java.util.Enumeration enumeration_tFileInputProperties_1 = properties_tFileInputProperties_1.propertyNames();
		while (enumeration_tFileInputProperties_1.hasMoreElements()) {
			nb_line_tFileInputProperties_1++;
			row5.key = (String)enumeration_tFileInputProperties_1.nextElement();
			row5.value = (String)properties_tFileInputProperties_1.getProperty(row5.key);

 



/**
 * [tFileInputProperties_1 begin ] stop
 */
	
	/**
	 * [tFileInputProperties_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 


	tos_count_tFileInputProperties_1++;

/**
 * [tFileInputProperties_1 main ] stop
 */
	
	/**
	 * [tFileInputProperties_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 process_data_begin ] stop
 */

	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row5.key != null){
                          tmp_key_tContextLoad_1 = row5.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row5.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row5.key != null) {
                    key_tContextLoad_1 =
                        row5.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row5.value != null) {
                    value_tContextLoad_1 =
                        row5.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
				

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "association_file".equals(key_tContextLoad_1))
        {
           context.association_file=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "db_host".equals(key_tContextLoad_1))
        {
           context.db_host=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "db_name".equals(key_tContextLoad_1))
        {
           context.db_name=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "db_password".equals(key_tContextLoad_1))
        {
           context.db_password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "db_port".equals(key_tContextLoad_1))
        {
           context.db_port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "db_shema".equals(key_tContextLoad_1))
        {
           context.db_shema=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "db_user_name".equals(key_tContextLoad_1))
        {
           context.db_user_name=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "properties_filepath".equals(key_tContextLoad_1))
        {
           context.properties_filepath=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "rejet_association_file".equals(key_tContextLoad_1))
        {
           context.rejet_association_file=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "rejet_waldec_association_file".equals(key_tContextLoad_1))
        {
           context.rejet_waldec_association_file=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "waldec_association_file".equals(key_tContextLoad_1))
        {
           context.waldec_association_file=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_begin ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_end ] stop
 */



	
	/**
	 * [tFileInputProperties_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputProperties_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

		}
	}finally{
		if(fis_tFileInputProperties_1!=null){
			fis_tFileInputProperties_1.close();
		}
	}
globalMap.put("tFileInputProperties_1_NB_LINE", nb_line_tFileInputProperties_1);
 

ok_Hash.put("tFileInputProperties_1", true);
end_Hash.put("tFileInputProperties_1", System.currentTimeMillis());




/**
 * [tFileInputProperties_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputProperties_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final integrationFichierCsv integrationFichierCsvClass = new integrationFichierCsv();

        int exitCode = integrationFichierCsvClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = integrationFichierCsv.class.getClassLoader().getResourceAsStream("importasso/integrationfichiercsv_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = integrationFichierCsv.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("association_file", "id_String");
				
                context.association_file=(String) context.getProperty("association_file");
				    context.setContextType("db_host", "id_String");
				
                context.db_host=(String) context.getProperty("db_host");
				    context.setContextType("db_name", "id_String");
				
                context.db_name=(String) context.getProperty("db_name");
				    context.setContextType("db_password", "id_String");
				
                context.db_password=(String) context.getProperty("db_password");
				    context.setContextType("db_port", "id_String");
				
                context.db_port=(String) context.getProperty("db_port");
				    context.setContextType("db_shema", "id_String");
				
                context.db_shema=(String) context.getProperty("db_shema");
				    context.setContextType("db_user_name", "id_String");
				
                context.db_user_name=(String) context.getProperty("db_user_name");
				    context.setContextType("properties_filepath", "id_String");
				
                context.properties_filepath=(String) context.getProperty("properties_filepath");
				    context.setContextType("rejet_association_file", "id_String");
				
                context.rejet_association_file=(String) context.getProperty("rejet_association_file");
				    context.setContextType("rejet_waldec_association_file", "id_String");
				
                context.rejet_waldec_association_file=(String) context.getProperty("rejet_waldec_association_file");
				    context.setContextType("waldec_association_file", "id_String");
				
                context.waldec_association_file=(String) context.getProperty("waldec_association_file");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("association_file")) {
                context.association_file = (String) parentContextMap.get("association_file");
            }if (parentContextMap.containsKey("db_host")) {
                context.db_host = (String) parentContextMap.get("db_host");
            }if (parentContextMap.containsKey("db_name")) {
                context.db_name = (String) parentContextMap.get("db_name");
            }if (parentContextMap.containsKey("db_password")) {
                context.db_password = (String) parentContextMap.get("db_password");
            }if (parentContextMap.containsKey("db_port")) {
                context.db_port = (String) parentContextMap.get("db_port");
            }if (parentContextMap.containsKey("db_shema")) {
                context.db_shema = (String) parentContextMap.get("db_shema");
            }if (parentContextMap.containsKey("db_user_name")) {
                context.db_user_name = (String) parentContextMap.get("db_user_name");
            }if (parentContextMap.containsKey("properties_filepath")) {
                context.properties_filepath = (String) parentContextMap.get("properties_filepath");
            }if (parentContextMap.containsKey("rejet_association_file")) {
                context.rejet_association_file = (String) parentContextMap.get("rejet_association_file");
            }if (parentContextMap.containsKey("rejet_waldec_association_file")) {
                context.rejet_waldec_association_file = (String) parentContextMap.get("rejet_waldec_association_file");
            }if (parentContextMap.containsKey("waldec_association_file")) {
                context.waldec_association_file = (String) parentContextMap.get("waldec_association_file");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_1) {
globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

e_tDBConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : integrationFichierCsv");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     299679 characters generated by Talend Open Studio for Data Integration 
 *     on the May 10, 2020 1:13:12 PM CEST
 ************************************************************************************************/